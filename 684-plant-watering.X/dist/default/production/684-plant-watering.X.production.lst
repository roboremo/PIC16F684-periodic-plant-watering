

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Aug 10 07:07:41 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F684
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     	;# 
    42  0001                     	;# 
    43  0002                     	;# 
    44  0003                     	;# 
    45  0004                     	;# 
    46  0005                     	;# 
    47  0007                     	;# 
    48  000A                     	;# 
    49  000B                     	;# 
    50  000C                     	;# 
    51  000E                     	;# 
    52  000E                     	;# 
    53  000F                     	;# 
    54  0010                     	;# 
    55  0011                     	;# 
    56  0012                     	;# 
    57  0013                     	;# 
    58  0013                     	;# 
    59  0014                     	;# 
    60  0015                     	;# 
    61  0016                     	;# 
    62  0017                     	;# 
    63  0018                     	;# 
    64  0019                     	;# 
    65  001A                     	;# 
    66  001E                     	;# 
    67  001F                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  0087                     	;# 
    71  008C                     	;# 
    72  008E                     	;# 
    73  008F                     	;# 
    74  0090                     	;# 
    75  0091                     	;# 
    76  0092                     	;# 
    77  0095                     	;# 
    78  0095                     	;# 
    79  0096                     	;# 
    80  0096                     	;# 
    81  0099                     	;# 
    82  009A                     	;# 
    83  009A                     	;# 
    84  009B                     	;# 
    85  009C                     	;# 
    86  009D                     	;# 
    87  009E                     	;# 
    88  009F                     	;# 
    89                           
    90                           	psect	strings
    91  0400                     __pstrings:	
    92  0400                     stringtab:	
    93  0400                     __stringtab:	
    94  0400                     stringcode:	
    95                           ;	String table - string pointers are 1 byte each
    96                           
    97  0400                     stringdir:	
    98  0400  3004               	movlw	high stringdir
    99  0401  008A               	movwf	10
   100  0402  0804               	movf	4,w
   101  0403  0A84               	incf	4,f
   102  0404  0782               	addwf	2,f
   103  0405                     __stringbase:	
   104  0405  3400               	retlw	0
   105  0406                     __end_of__stringtab:	
   106  0406                     putn@decaShift:	
   107  0406  3480               	retlw	128
   108  0407  3496               	retlw	150
   109  0408  3498               	retlw	152
   110  0409  3400               	retlw	0
   111  040A  3440               	retlw	64
   112  040B  3442               	retlw	66
   113  040C  340F               	retlw	15
   114  040D  3400               	retlw	0
   115  040E  34A0               	retlw	160
   116  040F  3486               	retlw	134
   117  0410  3401               	retlw	1
   118  0411  3400               	retlw	0
   119  0412  3410               	retlw	16
   120  0413  3427               	retlw	39
   121  0414  3400               	retlw	0
   122  0415  3400               	retlw	0
   123  0416  34E8               	retlw	232
   124  0417  3403               	retlw	3
   125  0418  3400               	retlw	0
   126  0419  3400               	retlw	0
   127  041A  3464               	retlw	100
   128  041B  3400               	retlw	0
   129  041C  3400               	retlw	0
   130  041D  3400               	retlw	0
   131  041E  340A               	retlw	10
   132  041F  3400               	retlw	0
   133  0420  3400               	retlw	0
   134  0421  3400               	retlw	0
   135  0422                     __end_ofputn@decaShift:	
   136  0422                     _paramIds:	
   137  0422  3470               	retlw	112
   138  0423  3469               	retlw	105
   139  0424  3400               	retlw	0
   140  0425                     __end_of_paramIds:	
   141  0019                     _CMCON0	set	25
   142  000B                     _INTCONbits	set	11
   143  000C                     _PIR1bits	set	12
   144  0005                     _PORTAbits	set	5
   145  0007                     _PORTCbits	set	7
   146  0012                     _T2CONbits	set	18
   147  0011                     _TMR2	set	17
   148  0091                     _ANSEL	set	145
   149  009B                     _EEADR	set	155
   150  009C                     _EECON1bits	set	156
   151  009D                     _EECON2	set	157
   152  009A                     _EEDATA	set	154
   153  0096                     _IOCAbits	set	150
   154  0081                     _OPTION_REGbits	set	129
   155  0092                     _PR2	set	146
   156  0085                     _TRISA	set	133
   157  0087                     _TRISC	set	135
   158  0095                     _WPUA	set	149
   159  0425                     STR_4:	
   160  0425  3475               	retlw	117	;'u'
   161  0426  3470               	retlw	112	;'p'
   162  0427  3420               	retlw	32	;' '
   163  0428  3474               	retlw	116	;'t'
   164  0429  3469               	retlw	105	;'i'
   165  042A  346D               	retlw	109	;'m'
   166  042B  3465               	retlw	101	;'e'
   167  042C  343A               	retlw	58	;':'
   168  042D  3420               	retlw	32	;' '
   169  042E  3400               	retlw	0
   170  042F                     STR_6:	
   171  042F  3463               	retlw	99	;'c'
   172  0430  346C               	retlw	108	;'l'
   173  0431  346F               	retlw	111	;'o'
   174  0432  3473               	retlw	115	;'s'
   175  0433  3465               	retlw	101	;'e'
   176  0434  3400               	retlw	0
   177  0435                     STR_7:	
   178  0435  3473               	retlw	115	;'s'
   179  0436  3465               	retlw	101	;'e'
   180  0437  3474               	retlw	116	;'t'
   181  0438  3420               	retlw	32	;' '
   182  0439  3400               	retlw	0
   183  043A                     STR_5:	
   184  043A  346F               	retlw	111	;'o'
   185  043B  3470               	retlw	112	;'p'
   186  043C  3465               	retlw	101	;'e'
   187  043D  346E               	retlw	110	;'n'
   188  043E  3400               	retlw	0
   189  043F                     STR_1:	
   190  043F  3420               	retlw	32	;' '
   191  0440  343D               	retlw	61	;'='
   192  0441  3420               	retlw	32	;' '
   193  0442  3400               	retlw	0
   194  0443                     STR_3:	
   195  0443  3474               	retlw	116	;'t'
   196  0444  3469               	retlw	105	;'i'
   197  0445  346D               	retlw	109	;'m'
   198  0446  3400               	retlw	0
   199  0447                     STR_2:	
   200  0447  3467               	retlw	103	;'g'
   201  0448  3465               	retlw	101	;'e'
   202  0449  3474               	retlw	116	;'t'
   203  044A  3400               	retlw	0
   204                           
   205                           ; #config settings
   206  0000                     
   207                           	psect	cinit
   208  0010                     start_initialization:	
   209  0010                     __initialization:	
   210                           
   211                           ; Clear objects allocated to COMMON
   212  0010  01FD               	clrf	__pbssCOMMON& (0+127)
   213                           
   214                           ; Clear objects allocated to BANK0
   215  0011  1383               	bcf	3,7	;select IRP bank0
   216  0012  304D               	movlw	low __pbssBANK0
   217  0013  0084               	movwf	4
   218  0014  305D               	movlw	low (__pbssBANK0+16)
   219  0015  269C               	fcall	clear_ram0
   220                           
   221                           ; Clear objects allocated to BANK1
   222  0016  30A0               	movlw	low __pbssBANK1
   223  0017  0084               	movwf	4
   224  0018  30C0               	movlw	low (__pbssBANK1+32)
   225  0019  269C               	fcall	clear_ram0
   226  001A                     end_of_initialization:	
   227                           ;End of C runtime variable initialization code
   228                           
   229  001A                     __end_of__initialization:	
   230  001A  0183               	clrf	3
   231  001B  281C               	ljmp	_main	;jump to C main() function
   232                           
   233                           	psect	bssCOMMON
   234  007D                     __pbssCOMMON:	
   235  007D                     _cmdIndex:	
   236  007D                     	ds	1
   237                           
   238                           	psect	bssBANK0
   239  004D                     __pbssBANK0:	
   240  004D                     _params:	
   241  004D                     	ds	8
   242  0055                     _sec:	
   243  0055                     	ds	4
   244  0059                     _btEnCounter:	
   245  0059                     	ds	1
   246  005A                     _c:	
   247  005A                     	ds	1
   248  005B                     _cmdReady:	
   249  005B                     	ds	1
   250  005C                     _tCounter:	
   251  005C                     	ds	1
   252                           
   253                           	psect	bssBANK1
   254  00A0                     __pbssBANK1:	
   255  00A0                     _cmd:	
   256  00A0                     	ds	32
   257                           
   258                           	psect	clrtext
   259  069C                     clear_ram0:	
   260                           ;	Called with FSR containing the base address, and
   261                           ;	W with the last address+1
   262                           
   263  069C  0064               	clrwdt	;clear the watchdog before getting into this loop
   264  069D                     clrloop0:	
   265  069D  0180               	clrf	0	;clear RAM location pointed to by FSR
   266  069E  0A84               	incf	4,f	;increment pointer
   267  069F  0604               	xorwf	4,w	;XOR with final address
   268  06A0  1903               	btfsc	3,2	;have we reached the end yet?
   269  06A1  3400               	retlw	0	;all done for this memory range, return
   270  06A2  0604               	xorwf	4,w	;XOR again to restore value
   271  06A3  2E9D               	goto	clrloop0	;do the next byte
   272                           
   273                           	psect	cstackCOMMON
   274  0070                     __pcstackCOMMON:	
   275  0070                     ?_isdigit:	
   276  0070                     ??_getc:	
   277                           ; 1 bit 
   278                           
   279  0070                     ?_putc:	
   280                           ; 0 bytes @ 0x0
   281                           
   282  0070                     ?_puts:	
   283                           ; 0 bytes @ 0x0
   284                           
   285  0070                     ?_putLF:	
   286                           ; 0 bytes @ 0x0
   287                           
   288  0070                     ?_initParams:	
   289                           ; 0 bytes @ 0x0
   290                           
   291  0070                     ?_showParams:	
   292                           ; 0 bytes @ 0x0
   293                           
   294  0070                     ?_initPORTS:	
   295                           ; 0 bytes @ 0x0
   296                           
   297  0070                     ?_openValve:	
   298                           ; 0 bytes @ 0x0
   299                           
   300  0070                     ?_closeValve:	
   301                           ; 0 bytes @ 0x0
   302                           
   303  0070                     ?_exeCmd:	
   304                           ; 0 bytes @ 0x0
   305                           
   306  0070                     ?_main:	
   307                           ; 0 bytes @ 0x0
   308                           
   309  0070                     ?_isr:	
   310                           ; 0 bytes @ 0x0
   311                           
   312  0070                     ?_getc:	
   313                           ; 0 bytes @ 0x0
   314                           
   315  0070                     ?_eeRead8:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     ?_cmdStartsWith:	
   319                           ; 1 bytes @ 0x0
   320                           
   321                           
   322                           ; 1 bytes @ 0x0
   323  0070                     	ds	2
   324  0072                     getc@wait:	
   325                           
   326                           ; 2 bytes @ 0x2
   327  0072                     	ds	2
   328  0074                     getc@a:	
   329                           
   330                           ; 1 bytes @ 0x4
   331  0074                     	ds	1
   332  0075                     getc@i:	
   333                           
   334                           ; 1 bytes @ 0x5
   335  0075                     	ds	1
   336  0076                     getc@res:	
   337                           
   338                           ; 1 bytes @ 0x6
   339  0076                     	ds	1
   340  0077                     getc@j:	
   341                           
   342                           ; 1 bytes @ 0x7
   343  0077                     	ds	1
   344  0078                     ??_isr:	
   345                           
   346                           ; 0 bytes @ 0x8
   347  0078                     	ds	5
   348                           
   349                           	psect	cstackBANK0
   350  0020                     __pcstackBANK0:	
   351  0020                     ??_isdigit:	
   352  0020                     ??_putc:	
   353                           ; 0 bytes @ 0x0
   354                           
   355  0020                     ?_eeWrite8:	
   356                           ; 0 bytes @ 0x0
   357                           
   358  0020                     ??_eeRead8:	
   359                           ; 0 bytes @ 0x0
   360                           
   361  0020                     ??_initPORTS:	
   362                           ; 0 bytes @ 0x0
   363                           
   364  0020                     ??_openValve:	
   365                           ; 0 bytes @ 0x0
   366                           
   367  0020                     ??_closeValve:	
   368                           ; 0 bytes @ 0x0
   369                           
   370  0020                     ??_cmdStartsWith:	
   371                           ; 0 bytes @ 0x0
   372                           
   373  0020                     ?___lmul:	
   374                           ; 0 bytes @ 0x0
   375                           
   376  0020                     ?___almod:	
   377                           ; 4 bytes @ 0x0
   378                           
   379  0020                     ?___lldiv:	
   380                           ; 4 bytes @ 0x0
   381                           
   382  0020                     eeWrite8@data:	
   383                           ; 4 bytes @ 0x0
   384                           
   385  0020                     eeRead8@addr:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0020                     _isdigit$582:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0020                     ___lmul@multiplier:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0020                     ___almod@divisor:	
   395                           ; 4 bytes @ 0x0
   396                           
   397  0020                     ___lldiv@divisor:	
   398                           ; 4 bytes @ 0x0
   399                           
   400                           
   401                           ; 4 bytes @ 0x0
   402  0020                     	ds	1
   403  0021                     ??_eeWrite8:	
   404  0021                     ?_eeRead32:	
   405                           ; 0 bytes @ 0x1
   406                           
   407  0021                     eeWrite8@addr:	
   408                           ; 4 bytes @ 0x1
   409                           
   410  0021                     cmdStartsWith@st:	
   411                           ; 1 bytes @ 0x1
   412                           
   413  0021                     isdigit@c:	
   414                           ; 1 bytes @ 0x1
   415                           
   416                           
   417                           ; 1 bytes @ 0x1
   418  0021                     	ds	1
   419  0022                     ?_eeWrite32:	
   420  0022                     putc@data:	
   421                           ; 0 bytes @ 0x2
   422                           
   423  0022                     cmdStartsWith@i:	
   424                           ; 1 bytes @ 0x2
   425                           
   426  0022                     eeWrite32@data:	
   427                           ; 1 bytes @ 0x2
   428                           
   429                           
   430                           ; 4 bytes @ 0x2
   431  0022                     	ds	1
   432  0023                     putc@i:	
   433                           
   434                           ; 1 bytes @ 0x3
   435  0023                     	ds	1
   436  0024                     putc@j:	
   437  0024                     ___lmul@multiplicand:	
   438                           ; 1 bytes @ 0x4
   439                           
   440  0024                     ___almod@dividend:	
   441                           ; 4 bytes @ 0x4
   442                           
   443  0024                     ___lldiv@dividend:	
   444                           ; 4 bytes @ 0x4
   445                           
   446                           
   447                           ; 4 bytes @ 0x4
   448  0024                     	ds	1
   449  0025                     ??_puts:	
   450  0025                     ??_putLF:	
   451                           ; 0 bytes @ 0x5
   452                           
   453  0025                     ??_eeRead32:	
   454                           ; 0 bytes @ 0x5
   455                           
   456                           
   457                           ; 0 bytes @ 0x5
   458  0025                     	ds	1
   459  0026                     ??_eeWrite32:	
   460  0026                     puts@i:	
   461                           ; 0 bytes @ 0x6
   462                           
   463                           
   464                           ; 1 bytes @ 0x6
   465  0026                     	ds	1
   466  0027                     puts@s:	
   467                           
   468                           ; 1 bytes @ 0x7
   469  0027                     	ds	1
   470  0028                     ??___lmul:	
   471  0028                     ??___almod:	
   472                           ; 0 bytes @ 0x8
   473                           
   474  0028                     ??___lldiv:	
   475                           ; 0 bytes @ 0x8
   476                           
   477                           
   478                           ; 0 bytes @ 0x8
   479  0028                     	ds	1
   480  0029                     eeRead32@addr:	
   481  0029                     ___almod@counter:	
   482                           ; 1 bytes @ 0x9
   483                           
   484  0029                     ___lmul@product:	
   485                           ; 1 bytes @ 0x9
   486                           
   487  0029                     ___lldiv@quotient:	
   488                           ; 4 bytes @ 0x9
   489                           
   490                           
   491                           ; 4 bytes @ 0x9
   492  0029                     	ds	1
   493  002A                     ___almod@sign:	
   494  002A                     eeRead32@res:	
   495                           ; 1 bytes @ 0xA
   496                           
   497                           
   498                           ; 4 bytes @ 0xA
   499  002A                     	ds	1
   500  002B                     eeWrite32@addr:	
   501                           
   502                           ; 1 bytes @ 0xB
   503  002B                     	ds	1
   504  002C                     eeWrite32@i:	
   505                           
   506                           ; 1 bytes @ 0xC
   507  002C                     	ds	1
   508  002D                     ?_writeParam:	
   509  002D                     ?_atol:	
   510                           ; 0 bytes @ 0xD
   511                           
   512  002D                     ___lldiv@counter:	
   513                           ; 4 bytes @ 0xD
   514                           
   515  002D                     writeParam@val:	
   516                           ; 1 bytes @ 0xD
   517                           
   518                           
   519                           ; 4 bytes @ 0xD
   520  002D                     	ds	1
   521  002E                     ?___llmod:	
   522  002E                     eeRead32@i:	
   523                           ; 4 bytes @ 0xE
   524                           
   525  002E                     ___llmod@divisor:	
   526                           ; 1 bytes @ 0xE
   527                           
   528                           
   529                           ; 4 bytes @ 0xE
   530  002E                     	ds	1
   531  002F                     ?_readParam:	
   532                           
   533                           ; 4 bytes @ 0xF
   534  002F                     	ds	2
   535  0031                     ??_atol:	
   536  0031                     ??_writeParam:	
   537                           ; 0 bytes @ 0x11
   538                           
   539                           
   540                           ; 0 bytes @ 0x11
   541  0031                     	ds	1
   542  0032                     writeParam@id:	
   543  0032                     ___llmod@dividend:	
   544                           ; 1 bytes @ 0x12
   545                           
   546                           
   547                           ; 4 bytes @ 0x12
   548  0032                     	ds	1
   549  0033                     ??_readParam:	
   550  0033                     writeParam@i:	
   551                           ; 0 bytes @ 0x13
   552                           
   553                           
   554                           ; 1 bytes @ 0x13
   555  0033                     	ds	1
   556  0034                     ?_updateParam:	
   557  0034                     readParam@id:	
   558                           ; 0 bytes @ 0x14
   559                           
   560  0034                     updateParam@val:	
   561                           ; 1 bytes @ 0x14
   562                           
   563                           
   564                           ; 4 bytes @ 0x14
   565  0034                     	ds	1
   566  0035                     readParam@i:	
   567  0035                     atol@sign:	
   568                           ; 1 bytes @ 0x15
   569                           
   570                           
   571                           ; 1 bytes @ 0x15
   572  0035                     	ds	1
   573  0036                     ??_initParams:	
   574  0036                     ??___llmod:	
   575                           ; 0 bytes @ 0x16
   576                           
   577  0036                     atol@a:	
   578                           ; 0 bytes @ 0x16
   579                           
   580                           
   581                           ; 4 bytes @ 0x16
   582  0036                     	ds	1
   583  0037                     initParams@i:	
   584  0037                     ___llmod@counter:	
   585                           ; 1 bytes @ 0x17
   586                           
   587                           
   588                           ; 1 bytes @ 0x17
   589  0037                     	ds	1
   590  0038                     ?_putn:	
   591  0038                     ??_updateParam:	
   592                           ; 0 bytes @ 0x18
   593                           
   594  0038                     putn@n:	
   595                           ; 0 bytes @ 0x18
   596                           
   597                           
   598                           ; 4 bytes @ 0x18
   599  0038                     	ds	1
   600  0039                     updateParam@id:	
   601                           
   602                           ; 1 bytes @ 0x19
   603  0039                     	ds	1
   604  003A                     updateParam@i:	
   605  003A                     atol@s:	
   606                           ; 1 bytes @ 0x1A
   607                           
   608                           
   609                           ; 1 bytes @ 0x1A
   610  003A                     	ds	1
   611  003B                     atol@c:	
   612                           
   613                           ; 1 bytes @ 0x1B
   614  003B                     	ds	1
   615  003C                     ??_putn:	
   616                           
   617                           ; 0 bytes @ 0x1C
   618  003C                     	ds	2
   619  003E                     putn@z:	
   620                           
   621                           ; 1 bytes @ 0x1E
   622  003E                     	ds	1
   623  003F                     putn@dig:	
   624                           
   625                           ; 1 bytes @ 0x1F
   626  003F                     	ds	1
   627  0040                     putn@i:	
   628                           
   629                           ; 1 bytes @ 0x20
   630  0040                     	ds	1
   631  0041                     ??_showParams:	
   632                           
   633                           ; 0 bytes @ 0x21
   634  0041                     	ds	1
   635  0042                     showParams@i:	
   636                           
   637                           ; 1 bytes @ 0x22
   638  0042                     	ds	1
   639  0043                     ??_exeCmd:	
   640                           
   641                           ; 0 bytes @ 0x23
   642  0043                     	ds	1
   643  0044                     exeCmd@val:	
   644                           
   645                           ; 4 bytes @ 0x24
   646  0044                     	ds	4
   647  0048                     ??_main:	
   648                           
   649                           ; 0 bytes @ 0x28
   650  0048                     	ds	1
   651  0049                     main@r:	
   652                           
   653                           ; 4 bytes @ 0x29
   654  0049                     	ds	4
   655                           
   656                           	psect	maintext
   657  001C                     __pmaintext:	
   658 ;;
   659 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   660 ;;
   661 ;; *************** function _main *****************
   662 ;; Defined at:
   663 ;;		line 143 in file "main.c"
   664 ;; Parameters:    Size  Location     Type
   665 ;;		None
   666 ;; Auto vars:     Size  Location     Type
   667 ;;  r               4   41[BANK0 ] unsigned long 
   668 ;;  c               1    0        unsigned char 
   669 ;; Return value:  Size  Location     Type
   670 ;;		None               void
   671 ;; Registers used:
   672 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   673 ;; Tracked objects:
   674 ;;		On entry : B00/0
   675 ;;		On exit  : 0/0
   676 ;;		Unchanged: 0/0
   677 ;; Data sizes:     COMMON   BANK0   BANK1
   678 ;;      Params:         0       0       0
   679 ;;      Locals:         0       4       0
   680 ;;      Temps:          0       1       0
   681 ;;      Totals:         0       5       0
   682 ;;Total ram usage:        5 bytes
   683 ;; Hardware stack levels required when called:    8
   684 ;; This function calls:
   685 ;;		___llmod
   686 ;;		_closeValve
   687 ;;		_exeCmd
   688 ;;		_initPORTS
   689 ;;		_initParams
   690 ;;		_openValve
   691 ;; This function is called by:
   692 ;;		Startup code after reset
   693 ;; This function uses a non-reentrant model
   694 ;;
   695                           
   696                           
   697                           ;psect for function _main
   698  001C                     _main:	
   699                           
   700                           ;main.c: 145: uint8_t c;
   701                           ;main.c: 146: uint32_t r;
   702                           ;main.c: 148: initPORTS();
   703                           
   704                           ;incstack = 0
   705                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   706  001C  2666               	fcall	_initPORTS
   707                           
   708                           ;main.c: 155: cmdIndex = 0;
   709  001D  01FD               	clrf	_cmdIndex
   710                           
   711                           ;main.c: 156: initParams();
   712  001E  25D2               	fcall	_initParams
   713                           
   714                           ;main.c: 160: T2CONbits.TMR2ON = 0;
   715  001F  1283               	bcf	3,5	;RP0=0, select bank0
   716  0020  1112               	bcf	18,2	;volatile
   717                           
   718                           ;main.c: 161: T2CONbits.T2CKPS = 0b11;
   719  0021  3003               	movlw	3
   720  0022  0492               	iorwf	18,f	;volatile
   721                           
   722                           ;main.c: 162: T2CONbits.TOUTPS = 9;
   723  0023  0812               	movf	18,w	;volatile
   724  0024  3987               	andlw	-121
   725  0025  3848               	iorlw	72
   726  0026  0092               	movwf	18	;volatile
   727                           
   728                           ;main.c: 163: PR2 = 249;
   729  0027  30F9               	movlw	249
   730  0028  1683               	bsf	3,5	;RP0=1, select bank1
   731  0029  0092               	movwf	18	;volatile
   732                           
   733                           ;main.c: 164: TMR2 = 0;
   734  002A  1283               	bcf	3,5	;RP0=0, select bank0
   735  002B  0191               	clrf	17	;volatile
   736                           
   737                           ;main.c: 169: tCounter = 0;
   738  002C  01DC               	clrf	_tCounter
   739                           
   740                           ;main.c: 170: sec = 0;
   741  002D  3000               	movlw	0
   742  002E  00D8               	movwf	_sec+3
   743  002F  3000               	movlw	0
   744  0030  00D7               	movwf	_sec+2
   745  0031  3000               	movlw	0
   746  0032  00D6               	movwf	_sec+1
   747  0033  3000               	movlw	0
   748  0034  00D5               	movwf	_sec
   749                           
   750                           ;main.c: 171: T2CONbits.TMR2ON = 1;
   751  0035  1512               	bsf	18,2	;volatile
   752                           
   753                           ;main.c: 175: IOCAbits.IOC2 = 1;
   754  0036  1683               	bsf	3,5	;RP0=1, select bank1
   755  0037  1516               	bsf	22,2	;volatile
   756                           
   757                           ;main.c: 176: INTCONbits.RAIE = 1;
   758  0038  158B               	bsf	11,3	;volatile
   759                           
   760                           ;main.c: 177: INTCONbits.RAIF = 0;
   761  0039  100B               	bcf	11,0	;volatile
   762                           
   763                           ;main.c: 180: INTCONbits.GIE = 1;
   764  003A  178B               	bsf	11,7	;volatile
   765                           
   766                           ;main.c: 184: cmdReady = 0;
   767  003B  1283               	bcf	3,5	;RP0=0, select bank0
   768  003C  01DB               	clrf	_cmdReady
   769  003D                     l1799:	
   770                           ;main.c: 187: while(1) {
   771                           
   772                           
   773                           ;main.c: 189: if(cmdReady) {
   774  003D  085B               	movf	_cmdReady,w
   775  003E  1903               	btfsc	3,2
   776  003F  2844               	goto	l1807
   777                           
   778                           ;main.c: 190: exeCmd();
   779  0040  244B               	fcall	_exeCmd
   780                           
   781                           ;main.c: 191: cmdIndex = 0;
   782  0041  01FD               	clrf	_cmdIndex
   783                           
   784                           ;main.c: 192: cmdReady = 0;
   785  0042  1283               	bcf	3,5	;RP0=0, select bank0
   786  0043  01DB               	clrf	_cmdReady
   787  0044                     l1807:	
   788                           
   789                           ;main.c: 193: }
   790                           ;main.c: 196: if(!PORTAbits.RA0) {
   791  0044  1805               	btfsc	5,0	;volatile
   792  0045  284B               	goto	l1813
   793                           
   794                           ;main.c: 197: PORTCbits.RC1 = 1;
   795  0046  1487               	bsf	7,1	;volatile
   796                           
   797                           ;main.c: 198: btEnCounter = 30;
   798  0047  301E               	movlw	30
   799  0048  00C8               	movwf	??_main
   800  0049  0848               	movf	??_main,w
   801  004A  00D9               	movwf	_btEnCounter
   802  004B                     l1813:	
   803                           
   804                           ;main.c: 199: }
   805                           ;main.c: 202: if(PIR1bits.TMR2IF) {
   806  004B  1C8C               	btfss	12,1	;volatile
   807  004C  283D               	goto	l1799
   808                           
   809                           ;main.c: 203: PIR1bits.TMR2IF = 0;
   810  004D  108C               	bcf	12,1	;volatile
   811                           
   812                           ;main.c: 204: tCounter++;
   813  004E  3001               	movlw	1
   814  004F  00C8               	movwf	??_main
   815  0050  0848               	movf	??_main,w
   816  0051  07DC               	addwf	_tCounter,f
   817                           
   818                           ;main.c: 205: if(tCounter==50) {
   819  0052  3032               	movlw	50
   820  0053  065C               	xorwf	_tCounter,w
   821  0054  1D03               	btfss	3,2
   822  0055  28A0               	goto	l1839
   823                           
   824                           ;main.c: 206: tCounter = 0;
   825  0056  01DC               	clrf	_tCounter
   826                           
   827                           ;main.c: 207: sec++;
   828  0057  3001               	movlw	1
   829  0058  07D5               	addwf	_sec,f
   830  0059  3000               	movlw	0
   831  005A  1803               	skipnc
   832  005B  3001               	movlw	1
   833  005C  07D6               	addwf	_sec+1,f
   834  005D  3000               	movlw	0
   835  005E  1803               	skipnc
   836  005F  3001               	movlw	1
   837  0060  07D7               	addwf	_sec+2,f
   838  0061  3000               	movlw	0
   839  0062  1803               	skipnc
   840  0063  3001               	movlw	1
   841  0064  07D8               	addwf	_sec+3,f
   842                           
   843                           ;main.c: 218: if(btEnCounter) {
   844  0065  0859               	movf	_btEnCounter,w
   845  0066  1903               	btfsc	3,2
   846  0067  286D               	goto	l1829
   847                           
   848                           ;main.c: 219: btEnCounter--;
   849  0068  3001               	movlw	1
   850  0069  02D9               	subwf	_btEnCounter,f
   851                           
   852                           ;main.c: 220: if(btEnCounter==0) {
   853  006A  0859               	movf	_btEnCounter,w
   854  006B  1903               	btfsc	3,2
   855                           
   856                           ;main.c: 221: PORTCbits.RC1 = 0;
   857  006C  1087               	bcf	7,1	;volatile
   858  006D                     l1829:	
   859                           
   860                           ;main.c: 222: }
   861                           ;main.c: 223: }
   862                           ;main.c: 236: r = sec % params.p;
   863  006D  0850               	movf	_params+3,w
   864  006E  00B1               	movwf	___llmod@divisor+3
   865  006F  084F               	movf	_params+2,w
   866  0070  00B0               	movwf	___llmod@divisor+2
   867  0071  084E               	movf	_params+1,w
   868  0072  00AF               	movwf	___llmod@divisor+1
   869  0073  084D               	movf	_params,w
   870  0074  00AE               	movwf	___llmod@divisor
   871  0075  0858               	movf	_sec+3,w
   872  0076  00B5               	movwf	___llmod@dividend+3
   873  0077  0857               	movf	_sec+2,w
   874  0078  00B4               	movwf	___llmod@dividend+2
   875  0079  0856               	movf	_sec+1,w
   876  007A  00B3               	movwf	___llmod@dividend+1
   877  007B  0855               	movf	_sec,w
   878  007C  00B2               	movwf	___llmod@dividend
   879  007D  23AB               	fcall	___llmod
   880  007E  1283               	bcf	3,5	;RP0=0, select bank0
   881  007F  0831               	movf	?___llmod+3,w
   882  0080  00CC               	movwf	main@r+3
   883  0081  0830               	movf	?___llmod+2,w
   884  0082  00CB               	movwf	main@r+2
   885  0083  082F               	movf	?___llmod+1,w
   886  0084  00CA               	movwf	main@r+1
   887  0085  082E               	movf	?___llmod,w
   888  0086  00C9               	movwf	main@r
   889                           
   890                           ;main.c: 238: if(r == 0) {
   891  0087  084C               	movf	main@r+3,w
   892  0088  044B               	iorwf	main@r+2,w
   893  0089  044A               	iorwf	main@r+1,w
   894  008A  0449               	iorwf	main@r,w
   895  008B  1D03               	skipz
   896  008C  288E               	goto	l1835
   897                           
   898                           ;main.c: 239: openValve();
   899  008D  26AF               	fcall	_openValve
   900  008E                     l1835:	
   901                           
   902                           ;main.c: 240: }
   903                           ;main.c: 242: if(r == params.i) {
   904  008E  1283               	bcf	3,5	;RP0=0, select bank0
   905  008F  084C               	movf	main@r+3,w
   906  0090  0654               	xorwf	_params+7,w
   907  0091  1D03               	skipz
   908  0092  289D               	goto	u2065
   909  0093  084B               	movf	main@r+2,w
   910  0094  0653               	xorwf	_params+6,w
   911  0095  1D03               	skipz
   912  0096  289D               	goto	u2065
   913  0097  084A               	movf	main@r+1,w
   914  0098  0652               	xorwf	_params+5,w
   915  0099  1D03               	skipz
   916  009A  289D               	goto	u2065
   917  009B  0849               	movf	main@r,w
   918  009C  0651               	xorwf	_params+4,w
   919  009D                     u2065:	
   920  009D  1D03               	skipz
   921  009E  28A0               	goto	l1839
   922                           
   923                           ;main.c: 243: closeValve();
   924  009F  26B2               	fcall	_closeValve
   925  00A0                     l1839:	
   926                           
   927                           ;main.c: 245: }
   928                           ;main.c: 249: }
   929                           ;main.c: 252: if( (sec & 0x01) == 0) {
   930  00A0  1283               	bcf	3,5	;RP0=0, select bank0
   931  00A1  1855               	btfsc	_sec,0
   932  00A2  283D               	goto	l1799
   933                           
   934                           ;main.c: 253: if(tCounter==0) PORTCbits.RC4 = 1;
   935  00A3  085C               	movf	_tCounter,w
   936  00A4  1903               	btfsc	3,2
   937  00A5  1607               	bsf	7,4	;volatile
   938                           
   939                           ;main.c: 254: if(tCounter==5) PORTCbits.RC4 = 0;
   940  00A6  3005               	movlw	5
   941  00A7  065C               	xorwf	_tCounter,w
   942  00A8  1D03               	btfss	3,2
   943  00A9  283D               	goto	l1799
   944  00AA  1207               	bcf	7,4	;volatile
   945  00AB  283D               	goto	l1799
   946  00AC                     __end_of_main:	
   947                           
   948                           	psect	text1
   949  0666                     __ptext1:	
   950 ;; *************** function _initPORTS *****************
   951 ;; Defined at:
   952 ;;		line 60 in file "main.c"
   953 ;; Parameters:    Size  Location     Type
   954 ;;		None
   955 ;; Auto vars:     Size  Location     Type
   956 ;;		None
   957 ;; Return value:  Size  Location     Type
   958 ;;		None               void
   959 ;; Registers used:
   960 ;;		wreg, status,2
   961 ;; Tracked objects:
   962 ;;		On entry : 0/0
   963 ;;		On exit  : 0/0
   964 ;;		Unchanged: 0/0
   965 ;; Data sizes:     COMMON   BANK0   BANK1
   966 ;;      Params:         0       0       0
   967 ;;      Locals:         0       0       0
   968 ;;      Temps:          0       0       0
   969 ;;      Totals:         0       0       0
   970 ;;Total ram usage:        0 bytes
   971 ;; Hardware stack levels used:    1
   972 ;; Hardware stack levels required when called:    2
   973 ;; This function calls:
   974 ;;		Nothing
   975 ;; This function is called by:
   976 ;;		_main
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980                           
   981                           ;psect for function _initPORTS
   982  0666                     _initPORTS:	
   983                           
   984                           ;main.c: 62: CMCON0 = 0b00000111;
   985                           
   986                           ;incstack = 0
   987                           ; Regs used in _initPORTS: [wreg+status,2]
   988  0666  3007               	movlw	7
   989  0667  1283               	bcf	3,5	;RP0=0, select bank0
   990  0668  0099               	movwf	25	;volatile
   991                           
   992                           ;main.c: 63: ANSEL = 0b00000000;
   993  0669  1683               	bsf	3,5	;RP0=1, select bank1
   994  066A  0191               	clrf	17	;volatile
   995                           
   996                           ;main.c: 65: TRISA = 0b11111101;
   997  066B  30FD               	movlw	253
   998  066C  0085               	movwf	5	;volatile
   999                           
  1000                           ;main.c: 66: OPTION_REGbits.nRAPU = 0;
  1001  066D  1381               	bcf	1,7	;volatile
  1002                           
  1003                           ;main.c: 67: WPUA = 0b00000101;
  1004  066E  3005               	movlw	5
  1005  066F  0095               	movwf	21	;volatile
  1006                           
  1007                           ;main.c: 69: PORTAbits.RA1 = 1;
  1008  0670  1283               	bcf	3,5	;RP0=0, select bank0
  1009  0671  1485               	bsf	5,1	;volatile
  1010                           
  1011                           ;main.c: 71: TRISC = 0b11101001;
  1012  0672  30E9               	movlw	233
  1013  0673  1683               	bsf	3,5	;RP0=1, select bank1
  1014  0674  0087               	movwf	7	;volatile
  1015                           
  1016                           ;main.c: 73: PORTCbits.RC4 = 0;
  1017  0675  1283               	bcf	3,5	;RP0=0, select bank0
  1018  0676  1207               	bcf	7,4	;volatile
  1019                           
  1020                           ;main.c: 74: PORTCbits.RC1 = 0;
  1021  0677  1087               	bcf	7,1	;volatile
  1022                           
  1023                           ;main.c: 75: PORTCbits.RC2 = 0;
  1024  0678  1107               	bcf	7,2	;volatile
  1025  0679  0008               	return
  1026  067A                     __end_of_initPORTS:	
  1027                           
  1028                           	psect	text2
  1029  044B                     __ptext2:	
  1030 ;; *************** function _exeCmd *****************
  1031 ;; Defined at:
  1032 ;;		line 109 in file "main.c"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;		None
  1035 ;; Auto vars:     Size  Location     Type
  1036 ;;  val             4   36[BANK0 ] long 
  1037 ;; Return value:  Size  Location     Type
  1038 ;;		None               void
  1039 ;; Registers used:
  1040 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1041 ;; Tracked objects:
  1042 ;;		On entry : 0/0
  1043 ;;		On exit  : 0/0
  1044 ;;		Unchanged: 0/0
  1045 ;; Data sizes:     COMMON   BANK0   BANK1
  1046 ;;      Params:         0       0       0
  1047 ;;      Locals:         0       4       0
  1048 ;;      Temps:          0       1       0
  1049 ;;      Totals:         0       5       0
  1050 ;;Total ram usage:        5 bytes
  1051 ;; Hardware stack levels used:    1
  1052 ;; Hardware stack levels required when called:    7
  1053 ;; This function calls:
  1054 ;;		_atol
  1055 ;;		_closeValve
  1056 ;;		_cmdStartsWith
  1057 ;;		_openValve
  1058 ;;		_putLF
  1059 ;;		_putc
  1060 ;;		_putn
  1061 ;;		_puts
  1062 ;;		_showParams
  1063 ;;		_updateParam
  1064 ;; This function is called by:
  1065 ;;		_main
  1066 ;; This function uses a non-reentrant model
  1067 ;;
  1068                           
  1069                           
  1070                           ;psect for function _exeCmd
  1071  044B                     _exeCmd:	
  1072                           
  1073                           ;main.c: 112: if( cmdStartsWith("get") ) {
  1074                           
  1075                           ;incstack = 0
  1076                           ; Regs used in _exeCmd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1077  044B  3042               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1078  044C  2629               	fcall	_cmdStartsWith
  1079  044D  3A00               	xorlw	0
  1080  044E  1903               	skipnz
  1081  044F  2C51               	goto	l182
  1082                           
  1083                           ;main.c: 113: showParams();
  1084  0450  2540               	fcall	_showParams
  1085  0451                     l182:	
  1086                           
  1087                           ;main.c: 114: }
  1088                           ;main.c: 116: if( cmdStartsWith("tim") ) {
  1089  0451  303E               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1090  0452  2629               	fcall	_cmdStartsWith
  1091  0453  3A00               	xorlw	0
  1092  0454  1903               	skipnz
  1093  0455  2C65               	goto	l183
  1094                           
  1095                           ;main.c: 117: puts("up time: "); putn(sec); putc('s'); putLF();
  1096  0456  3020               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1097  0457  2651               	fcall	_puts
  1098  0458  1283               	bcf	3,5	;RP0=0, select bank0
  1099  0459  0858               	movf	_sec+3,w
  1100  045A  00BB               	movwf	putn@n+3
  1101  045B  0857               	movf	_sec+2,w
  1102  045C  00BA               	movwf	putn@n+2
  1103  045D  0856               	movf	_sec+1,w
  1104  045E  00B9               	movwf	putn@n+1
  1105  045F  0855               	movf	_sec,w
  1106  0460  00B8               	movwf	putn@n
  1107  0461  21B5               	fcall	_putn
  1108  0462  3073               	movlw	115
  1109  0463  235B               	fcall	_putc
  1110  0464  26AC               	fcall	_putLF
  1111  0465                     l183:	
  1112                           
  1113                           ;main.c: 118: }
  1114                           ;main.c: 121: if( cmdStartsWith("open") ) {
  1115  0465  3035               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1116  0466  2629               	fcall	_cmdStartsWith
  1117  0467  3A00               	xorlw	0
  1118  0468  1903               	skipnz
  1119  0469  2C6B               	goto	l1741
  1120                           
  1121                           ;main.c: 122: openValve();
  1122  046A  26AF               	fcall	_openValve
  1123  046B                     l1741:	
  1124                           
  1125                           ;main.c: 123: }
  1126                           ;main.c: 125: if( cmdStartsWith("close") ) {
  1127  046B  302A               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1128  046C  2629               	fcall	_cmdStartsWith
  1129  046D  3A00               	xorlw	0
  1130  046E  1903               	skipnz
  1131  046F  2C71               	goto	l1745
  1132                           
  1133                           ;main.c: 126: closeValve();
  1134  0470  26B2               	fcall	_closeValve
  1135  0471                     l1745:	
  1136                           
  1137                           ;main.c: 127: }
  1138                           ;main.c: 129: if( cmdStartsWith("set ") ) {
  1139  0471  3030               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1140  0472  2629               	fcall	_cmdStartsWith
  1141  0473  3A00               	xorlw	0
  1142  0474  1903               	skipnz
  1143  0475  2C8D               	goto	l1749
  1144                           
  1145                           ;main.c: 130: int32_t val = atol(cmd+6);
  1146  0476  30A6               	movlw	(low ((_cmd| 0+6)))& (0+255)
  1147  0477  20AC               	fcall	_atol
  1148  0478  1283               	bcf	3,5	;RP0=0, select bank0
  1149  0479  0830               	movf	?_atol+3,w
  1150  047A  00C7               	movwf	exeCmd@val+3
  1151  047B  082F               	movf	?_atol+2,w
  1152  047C  00C6               	movwf	exeCmd@val+2
  1153  047D  082E               	movf	?_atol+1,w
  1154  047E  00C5               	movwf	exeCmd@val+1
  1155  047F  082D               	movf	?_atol,w
  1156  0480  00C4               	movwf	exeCmd@val
  1157                           
  1158                           ;main.c: 131: updateParam(cmd[4], val);
  1159  0481  0847               	movf	exeCmd@val+3,w
  1160  0482  00B7               	movwf	updateParam@val+3
  1161  0483  0846               	movf	exeCmd@val+2,w
  1162  0484  00B6               	movwf	updateParam@val+2
  1163  0485  0845               	movf	exeCmd@val+1,w
  1164  0486  00B5               	movwf	updateParam@val+1
  1165  0487  0844               	movf	exeCmd@val,w
  1166  0488  00B4               	movwf	updateParam@val
  1167  0489  1683               	bsf	3,5	;RP0=1, select bank1
  1168  048A  0824               	movf	(_cmd^(0+128)+4),w
  1169  048B  24D3               	fcall	_updateParam
  1170                           
  1171                           ;main.c: 132: showParams();
  1172  048C  2540               	fcall	_showParams
  1173  048D                     l1749:	
  1174                           
  1175                           ;main.c: 134: }
  1176                           ;main.c: 136: btEnCounter = 30;
  1177  048D  301E               	movlw	30
  1178  048E  1283               	bcf	3,5	;RP0=0, select bank0
  1179  048F  00C3               	movwf	??_exeCmd
  1180  0490  0843               	movf	??_exeCmd,w
  1181  0491  00D9               	movwf	_btEnCounter
  1182  0492  0008               	return
  1183  0493                     __end_of_exeCmd:	
  1184                           
  1185                           	psect	text3
  1186  04D3                     __ptext3:	
  1187 ;; *************** function _updateParam *****************
  1188 ;; Defined at:
  1189 ;;		line 37 in file "plant_watering_params.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;  id              1    wreg     unsigned char 
  1192 ;;  val             4   20[BANK0 ] long 
  1193 ;; Auto vars:     Size  Location     Type
  1194 ;;  id              1   25[BANK0 ] unsigned char 
  1195 ;;  i               1   26[BANK0 ] unsigned char 
  1196 ;; Return value:  Size  Location     Type
  1197 ;;		None               void
  1198 ;; Registers used:
  1199 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMMON   BANK0   BANK1
  1205 ;;      Params:         0       4       0
  1206 ;;      Locals:         0       2       0
  1207 ;;      Temps:          0       1       0
  1208 ;;      Totals:         0       7       0
  1209 ;;Total ram usage:        7 bytes
  1210 ;; Hardware stack levels used:    1
  1211 ;; Hardware stack levels required when called:    5
  1212 ;; This function calls:
  1213 ;;		_writeParam
  1214 ;; This function is called by:
  1215 ;;		_exeCmd
  1216 ;; This function uses a non-reentrant model
  1217 ;;
  1218                           
  1219                           
  1220                           ;psect for function _updateParam
  1221  04D3                     _updateParam:	
  1222                           
  1223                           ;incstack = 0
  1224                           ; Regs used in _updateParam: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1225                           ;updateParam@id stored from wreg
  1226  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  1227  04D4  00B9               	movwf	updateParam@id
  1228                           
  1229                           ;plant_watering_params.c: 38: for(uint8_t i=0; paramIds[i]!=0; i++)
  1230  04D5  01BA               	clrf	updateParam@i
  1231  04D6                     l1565:	
  1232  04D6  083A               	movf	updateParam@i,w
  1233  04D7  3E1D               	addlw	low ((_paramIds-__stringbase)| (0+32768))
  1234  04D8  0084               	movwf	4
  1235  04D9  2400               	fcall	stringdir
  1236  04DA  3A00               	xorlw	0
  1237  04DB  1903               	btfsc	3,2
  1238  04DC  0008               	return
  1239                           
  1240                           ;plant_watering_params.c: 39: if(id==paramIds[i]) {
  1241  04DD  083A               	movf	updateParam@i,w
  1242  04DE  3E1D               	addlw	low ((_paramIds-__stringbase)| (0+32768))
  1243  04DF  0084               	movwf	4
  1244  04E0  2400               	fcall	stringdir
  1245  04E1  0639               	xorwf	updateParam@id,w
  1246  04E2  1D03               	skipz
  1247  04E3  2D06               	goto	l1563
  1248                           
  1249                           ;plant_watering_params.c: 40: ((int32_t*)(&params))[i] = val;
  1250  04E4  083A               	movf	updateParam@i,w
  1251  04E5  00B8               	movwf	??_updateParam
  1252  04E6  3001               	movlw	1
  1253  04E7                     u1685:	
  1254  04E7  1003               	clrc
  1255  04E8  0DB8               	rlf	??_updateParam,f
  1256  04E9  3EFF               	addlw	-1
  1257  04EA  1D03               	skipz
  1258  04EB  2CE7               	goto	u1685
  1259  04EC  1003               	clrc
  1260  04ED  0D38               	rlf	??_updateParam,w
  1261  04EE  3E4D               	addlw	(low (_params| 0))& (0+255)
  1262  04EF  0084               	movwf	4
  1263  04F0  0834               	movf	updateParam@val,w
  1264  04F1  1383               	bcf	3,7	;select IRP bank0
  1265  04F2  0080               	movwf	0
  1266  04F3  0A84               	incf	4,f
  1267  04F4  0835               	movf	updateParam@val+1,w
  1268  04F5  0080               	movwf	0
  1269  04F6  0A84               	incf	4,f
  1270  04F7  0836               	movf	updateParam@val+2,w
  1271  04F8  0080               	movwf	0
  1272  04F9  0A84               	incf	4,f
  1273  04FA  0837               	movf	updateParam@val+3,w
  1274  04FB  0080               	movwf	0
  1275                           
  1276                           ;plant_watering_params.c: 41: writeParam(id, val);
  1277  04FC  0837               	movf	updateParam@val+3,w
  1278  04FD  00B0               	movwf	writeParam@val+3
  1279  04FE  0836               	movf	updateParam@val+2,w
  1280  04FF  00AF               	movwf	writeParam@val+2
  1281  0500  0835               	movf	updateParam@val+1,w
  1282  0501  00AE               	movwf	writeParam@val+1
  1283  0502  0834               	movf	updateParam@val,w
  1284  0503  00AD               	movwf	writeParam@val
  1285  0504  0839               	movf	updateParam@id,w
  1286  0505  25FE               	fcall	_writeParam
  1287  0506                     l1563:	
  1288  0506  3001               	movlw	1
  1289  0507  1283               	bcf	3,5	;RP0=0, select bank0
  1290  0508  00B8               	movwf	??_updateParam
  1291  0509  0838               	movf	??_updateParam,w
  1292  050A  07BA               	addwf	updateParam@i,f
  1293  050B  2CD6               	goto	l1565
  1294  050C                     __end_of_updateParam:	
  1295                           
  1296                           	psect	text4
  1297  05FE                     __ptext4:	
  1298 ;; *************** function _writeParam *****************
  1299 ;; Defined at:
  1300 ;;		line 14 in file "plant_watering_params.c"
  1301 ;; Parameters:    Size  Location     Type
  1302 ;;  id              1    wreg     unsigned char 
  1303 ;;  val             4   13[BANK0 ] long 
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;  id              1   18[BANK0 ] unsigned char 
  1306 ;;  i               1   19[BANK0 ] unsigned char 
  1307 ;; Return value:  Size  Location     Type
  1308 ;;		None               void
  1309 ;; Registers used:
  1310 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1311 ;; Tracked objects:
  1312 ;;		On entry : 0/0
  1313 ;;		On exit  : 0/0
  1314 ;;		Unchanged: 0/0
  1315 ;; Data sizes:     COMMON   BANK0   BANK1
  1316 ;;      Params:         0       4       0
  1317 ;;      Locals:         0       2       0
  1318 ;;      Temps:          0       1       0
  1319 ;;      Totals:         0       7       0
  1320 ;;Total ram usage:        7 bytes
  1321 ;; Hardware stack levels used:    1
  1322 ;; Hardware stack levels required when called:    4
  1323 ;; This function calls:
  1324 ;;		_eeWrite32
  1325 ;; This function is called by:
  1326 ;;		_updateParam
  1327 ;; This function uses a non-reentrant model
  1328 ;;
  1329                           
  1330                           
  1331                           ;psect for function _writeParam
  1332  05FE                     _writeParam:	
  1333                           
  1334                           ;incstack = 0
  1335                           ; Regs used in _writeParam: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1336                           ;writeParam@id stored from wreg
  1337  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  1338  05FF  00B2               	movwf	writeParam@id
  1339                           
  1340                           ;plant_watering_params.c: 15: for(uint8_t i=0; paramIds[i]!=0; i++) {
  1341  0600  01B3               	clrf	writeParam@i
  1342  0601                     l1519:	
  1343  0601  0833               	movf	writeParam@i,w
  1344  0602  3E1D               	addlw	low ((_paramIds-__stringbase)| (0+32768))
  1345  0603  0084               	movwf	4
  1346  0604  2400               	fcall	stringdir
  1347  0605  3A00               	xorlw	0
  1348  0606  1903               	btfsc	3,2
  1349  0607  0008               	return
  1350                           
  1351                           ;plant_watering_params.c: 16: if(id==paramIds[i]) {
  1352  0608  0833               	movf	writeParam@i,w
  1353  0609  3E1D               	addlw	low ((_paramIds-__stringbase)| (0+32768))
  1354  060A  0084               	movwf	4
  1355  060B  2400               	fcall	stringdir
  1356  060C  0632               	xorwf	writeParam@id,w
  1357  060D  1D03               	skipz
  1358  060E  2E23               	goto	l1517
  1359                           
  1360                           ;plant_watering_params.c: 17: eeWrite32(i*4, val);
  1361  060F  0830               	movf	writeParam@val+3,w
  1362  0610  00A5               	movwf	eeWrite32@data+3
  1363  0611  082F               	movf	writeParam@val+2,w
  1364  0612  00A4               	movwf	eeWrite32@data+2
  1365  0613  082E               	movf	writeParam@val+1,w
  1366  0614  00A3               	movwf	eeWrite32@data+1
  1367  0615  082D               	movf	writeParam@val,w
  1368  0616  00A2               	movwf	eeWrite32@data
  1369  0617  0833               	movf	writeParam@i,w
  1370  0618  00B1               	movwf	??_writeParam
  1371  0619  3001               	movlw	1
  1372  061A                     u1565:	
  1373  061A  1003               	clrc
  1374  061B  0DB1               	rlf	??_writeParam,f
  1375  061C  3EFF               	addlw	-1
  1376  061D  1D03               	skipz
  1377  061E  2E1A               	goto	u1565
  1378  061F  1003               	clrc
  1379  0620  0D31               	rlf	??_writeParam,w
  1380  0621  25A3               	fcall	_eeWrite32
  1381                           
  1382                           ;plant_watering_params.c: 18: return;
  1383  0622  0008               	return
  1384  0623                     l1517:	
  1385  0623  3001               	movlw	1
  1386  0624  1283               	bcf	3,5	;RP0=0, select bank0
  1387  0625  00B1               	movwf	??_writeParam
  1388  0626  0831               	movf	??_writeParam,w
  1389  0627  07B3               	addwf	writeParam@i,f
  1390  0628  2E01               	goto	l1519
  1391  0629                     __end_of_writeParam:	
  1392                           
  1393                           	psect	text5
  1394  05A3                     __ptext5:	
  1395 ;; *************** function _eeWrite32 *****************
  1396 ;; Defined at:
  1397 ;;		line 47 in file "eeprom.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;  addr            1    wreg     unsigned char 
  1400 ;;  data            4    2[BANK0 ] long 
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;  addr            1   11[BANK0 ] unsigned char 
  1403 ;;  i               1   12[BANK0 ] unsigned char 
  1404 ;; Return value:  Size  Location     Type
  1405 ;;		None               void
  1406 ;; Registers used:
  1407 ;;		wreg, status,2, status,0, pclath, cstack
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMMON   BANK0   BANK1
  1413 ;;      Params:         0       4       0
  1414 ;;      Locals:         0       2       0
  1415 ;;      Temps:          0       5       0
  1416 ;;      Totals:         0      11       0
  1417 ;;Total ram usage:       11 bytes
  1418 ;; Hardware stack levels used:    1
  1419 ;; Hardware stack levels required when called:    3
  1420 ;; This function calls:
  1421 ;;		_eeWrite8
  1422 ;; This function is called by:
  1423 ;;		_writeParam
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           
  1428                           ;psect for function _eeWrite32
  1429  05A3                     _eeWrite32:	
  1430                           
  1431                           ;incstack = 0
  1432                           ; Regs used in _eeWrite32: [wreg+status,2+status,0+pclath+cstack]
  1433                           ;eeWrite32@addr stored from wreg
  1434  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  1435  05A4  00AB               	movwf	eeWrite32@addr
  1436                           
  1437                           ;eeprom.c: 48: uint8_t i;
  1438                           ;eeprom.c: 49: for(i=0; i<4; i++) {
  1439  05A5  01AC               	clrf	eeWrite32@i
  1440  05A6                     L1:	
  1441  05A6  3004               	movlw	4
  1442  05A7  022C               	subwf	eeWrite32@i,w
  1443  05A8  1803               	btfsc	3,0
  1444  05A9  0008               	return
  1445                           
  1446                           ;eeprom.c: 50: eeWrite8(addr+3-i, data );
  1447  05AA  0822               	movf	eeWrite32@data,w
  1448  05AB  00A6               	movwf	??_eeWrite32
  1449  05AC  0826               	movf	??_eeWrite32,w
  1450  05AD  00A0               	movwf	eeWrite8@data
  1451  05AE  032C               	decf	eeWrite32@i,w
  1452  05AF  3AFF               	xorlw	255
  1453  05B0  072B               	addwf	eeWrite32@addr,w
  1454  05B1  3E03               	addlw	3
  1455  05B2  267A               	fcall	_eeWrite8
  1456                           
  1457                           ;eeprom.c: 51: data = data >> 8;
  1458  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  1459  05B4  0822               	movf	eeWrite32@data,w
  1460  05B5  00A6               	movwf	??_eeWrite32
  1461  05B6  0823               	movf	eeWrite32@data+1,w
  1462  05B7  00A7               	movwf	??_eeWrite32+1
  1463  05B8  0824               	movf	eeWrite32@data+2,w
  1464  05B9  00A8               	movwf	??_eeWrite32+2
  1465  05BA  0825               	movf	eeWrite32@data+3,w
  1466  05BB  00A9               	movwf	??_eeWrite32+3
  1467  05BC  3008               	movlw	8
  1468  05BD  00AA               	movwf	??_eeWrite32+4
  1469  05BE                     u1215:	
  1470  05BE  0D29               	rlf	??_eeWrite32+3,w
  1471  05BF  0CA9               	rrf	??_eeWrite32+3,f
  1472  05C0  0CA8               	rrf	??_eeWrite32+2,f
  1473  05C1  0CA7               	rrf	??_eeWrite32+1,f
  1474  05C2  0CA6               	rrf	??_eeWrite32,f
  1475  05C3  0BAA               	decfsz	??_eeWrite32+4,f
  1476  05C4  2DBE               	goto	u1215
  1477  05C5  0829               	movf	??_eeWrite32+3,w
  1478  05C6  00A5               	movwf	eeWrite32@data+3
  1479  05C7  0828               	movf	??_eeWrite32+2,w
  1480  05C8  00A4               	movwf	eeWrite32@data+2
  1481  05C9  0827               	movf	??_eeWrite32+1,w
  1482  05CA  00A3               	movwf	eeWrite32@data+1
  1483  05CB  0826               	movf	??_eeWrite32,w
  1484  05CC  00A2               	movwf	eeWrite32@data
  1485  05CD  3001               	movlw	1
  1486  05CE  00A6               	movwf	??_eeWrite32
  1487  05CF  0826               	movf	??_eeWrite32,w
  1488  05D0  07AC               	addwf	eeWrite32@i,f
  1489  05D1  2DA6               	goto	L1
  1490  05D2                     __end_of_eeWrite32:	
  1491                           
  1492                           	psect	text6
  1493  067A                     __ptext6:	
  1494 ;; *************** function _eeWrite8 *****************
  1495 ;; Defined at:
  1496 ;;		line 6 in file "eeprom.c"
  1497 ;; Parameters:    Size  Location     Type
  1498 ;;  addr            1    wreg     unsigned char 
  1499 ;;  data            1    0[BANK0 ] unsigned char 
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;  addr            1    1[BANK0 ] unsigned char 
  1502 ;; Return value:  Size  Location     Type
  1503 ;;		None               void
  1504 ;; Registers used:
  1505 ;;		wreg
  1506 ;; Tracked objects:
  1507 ;;		On entry : 0/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMMON   BANK0   BANK1
  1511 ;;      Params:         0       1       0
  1512 ;;      Locals:         0       1       0
  1513 ;;      Temps:          0       0       0
  1514 ;;      Totals:         0       2       0
  1515 ;;Total ram usage:        2 bytes
  1516 ;; Hardware stack levels used:    1
  1517 ;; Hardware stack levels required when called:    2
  1518 ;; This function calls:
  1519 ;;		Nothing
  1520 ;; This function is called by:
  1521 ;;		_eeWrite32
  1522 ;;		_eeWrite16
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525                           
  1526                           
  1527                           ;psect for function _eeWrite8
  1528  067A                     _eeWrite8:	
  1529                           
  1530                           ;incstack = 0
  1531                           ; Regs used in _eeWrite8: [wreg]
  1532                           ;eeWrite8@addr stored from wreg
  1533  067A  1283               	bcf	3,5	;RP0=0, select bank0
  1534  067B  00A1               	movwf	eeWrite8@addr
  1535                           
  1536                           ;eeprom.c: 7: EEADR = addr;
  1537  067C  0821               	movf	eeWrite8@addr,w
  1538  067D  1683               	bsf	3,5	;RP0=1, select bank1
  1539  067E  009B               	movwf	27	;volatile
  1540                           
  1541                           ;eeprom.c: 8: EEDATA = data;
  1542  067F  1283               	bcf	3,5	;RP0=0, select bank0
  1543  0680  0820               	movf	eeWrite8@data,w
  1544  0681  1683               	bsf	3,5	;RP0=1, select bank1
  1545  0682  009A               	movwf	26	;volatile
  1546                           
  1547                           ;eeprom.c: 11: EECON1bits.WREN = 1;
  1548  0683  151C               	bsf	28,2	;volsfr
  1549                           
  1550                           ;eeprom.c: 12: EECON2 = 0x55;
  1551  0684  3055               	movlw	85
  1552  0685  009D               	movwf	29	;volsfr
  1553                           
  1554                           ;eeprom.c: 13: EECON2 = 0xAA;
  1555  0686  30AA               	movlw	170
  1556  0687  009D               	movwf	29	;volsfr
  1557                           
  1558                           ;eeprom.c: 14: EECON1bits.WR = 1;
  1559  0688  149C               	bsf	28,1	;volsfr
  1560  0689                     l93:	
  1561                           ;eeprom.c: 15: while(EECON1bits.WR==1) {}
  1562                           
  1563  0689  189C               	btfsc	28,1	;volsfr
  1564  068A  2E89               	goto	l93
  1565                           
  1566                           ;eeprom.c: 16: EECON1bits.WREN = 0;
  1567  068B  111C               	bcf	28,2	;volsfr
  1568  068C  0008               	return
  1569  068D                     __end_of_eeWrite8:	
  1570                           
  1571                           	psect	text7
  1572  0540                     __ptext7:	
  1573 ;; *************** function _showParams *****************
  1574 ;; Defined at:
  1575 ;;		line 45 in file "plant_watering_params.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;		None
  1578 ;; Auto vars:     Size  Location     Type
  1579 ;;  i               1   34[BANK0 ] unsigned char 
  1580 ;; Return value:  Size  Location     Type
  1581 ;;		None               void
  1582 ;; Registers used:
  1583 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMMON   BANK0   BANK1
  1589 ;;      Params:         0       0       0
  1590 ;;      Locals:         0       1       0
  1591 ;;      Temps:          0       1       0
  1592 ;;      Totals:         0       2       0
  1593 ;;Total ram usage:        2 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; Hardware stack levels required when called:    6
  1596 ;; This function calls:
  1597 ;;		_initParams
  1598 ;;		_putLF
  1599 ;;		_putc
  1600 ;;		_putn
  1601 ;;		_puts
  1602 ;; This function is called by:
  1603 ;;		_exeCmd
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           
  1608                           ;psect for function _showParams
  1609  0540                     _showParams:	
  1610                           
  1611                           ;plant_watering_params.c: 46: initParams();
  1612                           
  1613                           ;incstack = 0
  1614 ;; using string table level
  1615                           ; Regs used in _showParams: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1616  0540  25D2               	fcall	_initParams
  1617                           
  1618                           ;plant_watering_params.c: 49: for(uint8_t i=0; paramIds[i]!=0; i++) {
  1619  0541  1283               	bcf	3,5	;RP0=0, select bank0
  1620  0542  01C2               	clrf	showParams@i
  1621  0543                     l1577:	
  1622  0543  0842               	movf	showParams@i,w
  1623  0544  3E1D               	addlw	low ((_paramIds-__stringbase)| (0+32768))
  1624  0545  0084               	movwf	4
  1625  0546  2400               	fcall	stringdir
  1626  0547  3A00               	xorlw	0
  1627  0548  1903               	btfsc	3,2
  1628  0549  0008               	return
  1629                           
  1630                           ;plant_watering_params.c: 50: putc(paramIds[i]);
  1631  054A  0842               	movf	showParams@i,w
  1632  054B  3E1D               	addlw	low ((_paramIds-__stringbase)| (0+32768))
  1633  054C  0084               	movwf	4
  1634  054D  2400               	fcall	stringdir
  1635  054E  235B               	fcall	_putc
  1636                           
  1637                           ;plant_watering_params.c: 51: puts(" = ");
  1638  054F  303A               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1639  0550  2651               	fcall	_puts
  1640                           
  1641                           ;plant_watering_params.c: 52: putn( ((int32_t*)(&params))[i] );
  1642  0551  1283               	bcf	3,5	;RP0=0, select bank0
  1643  0552  0842               	movf	showParams@i,w
  1644  0553  00C1               	movwf	??_showParams
  1645  0554  3001               	movlw	1
  1646  0555                     u1705:	
  1647  0555  1003               	clrc
  1648  0556  0DC1               	rlf	??_showParams,f
  1649  0557  3EFF               	addlw	-1
  1650  0558  1D03               	skipz
  1651  0559  2D55               	goto	u1705
  1652  055A  1003               	clrc
  1653  055B  0D41               	rlf	??_showParams,w
  1654  055C  3E4D               	addlw	(low (_params| 0))& (0+255)
  1655  055D  0084               	movwf	4
  1656  055E  1383               	bcf	3,7	;select IRP bank0
  1657  055F  0800               	movf	0,w
  1658  0560  00B8               	movwf	putn@n
  1659  0561  0A84               	incf	4,f
  1660  0562  0800               	movf	0,w
  1661  0563  00B9               	movwf	putn@n+1
  1662  0564  0A84               	incf	4,f
  1663  0565  0800               	movf	0,w
  1664  0566  00BA               	movwf	putn@n+2
  1665  0567  0A84               	incf	4,f
  1666  0568  0800               	movf	0,w
  1667  0569  00BB               	movwf	putn@n+3
  1668  056A  21B5               	fcall	_putn
  1669                           
  1670                           ;plant_watering_params.c: 53: putLF();
  1671  056B  26AC               	fcall	_putLF
  1672  056C  3001               	movlw	1
  1673  056D  1283               	bcf	3,5	;RP0=0, select bank0
  1674  056E  00C1               	movwf	??_showParams
  1675  056F  0841               	movf	??_showParams,w
  1676  0570  07C2               	addwf	showParams@i,f
  1677  0571  2D43               	goto	l1577
  1678  0572                     __end_of_showParams:	
  1679                           
  1680                           	psect	text8
  1681  0651                     __ptext8:	
  1682 ;; *************** function _puts *****************
  1683 ;; Defined at:
  1684 ;;		line 123 in file "soft_uart_8_9600.c"
  1685 ;; Parameters:    Size  Location     Type
  1686 ;;  s               1    wreg     PTR const unsigned char 
  1687 ;;		 -> STR_4(10), STR_1(4), 
  1688 ;; Auto vars:     Size  Location     Type
  1689 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  1690 ;;		 -> STR_4(10), STR_1(4), 
  1691 ;;  i               1    6[BANK0 ] unsigned char 
  1692 ;; Return value:  Size  Location     Type
  1693 ;;		None               void
  1694 ;; Registers used:
  1695 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1696 ;; Tracked objects:
  1697 ;;		On entry : 0/0
  1698 ;;		On exit  : 0/0
  1699 ;;		Unchanged: 0/0
  1700 ;; Data sizes:     COMMON   BANK0   BANK1
  1701 ;;      Params:         0       0       0
  1702 ;;      Locals:         0       2       0
  1703 ;;      Temps:          0       1       0
  1704 ;;      Totals:         0       3       0
  1705 ;;Total ram usage:        3 bytes
  1706 ;; Hardware stack levels used:    1
  1707 ;; Hardware stack levels required when called:    3
  1708 ;; This function calls:
  1709 ;;		_putc
  1710 ;; This function is called by:
  1711 ;;		_showParams
  1712 ;;		_exeCmd
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716                           
  1717                           ;psect for function _puts
  1718  0651                     _puts:	
  1719                           
  1720                           ;incstack = 0
  1721                           ; Regs used in _puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1722                           ;puts@s stored from wreg
  1723  0651  1283               	bcf	3,5	;RP0=0, select bank0
  1724  0652  00A7               	movwf	puts@s
  1725                           
  1726                           ;soft_uart_8_9600.c: 124: uint8_t i;
  1727                           ;soft_uart_8_9600.c: 126: for(i=0; s[i]!=0; i++) {
  1728  0653  01A6               	clrf	puts@i
  1729  0654                     l1473:	
  1730  0654  0826               	movf	puts@i,w
  1731  0655  0727               	addwf	puts@s,w
  1732  0656  0084               	movwf	4
  1733  0657  2400               	fcall	stringdir
  1734  0658  3A00               	xorlw	0
  1735  0659  1903               	btfsc	3,2
  1736  065A  0008               	return
  1737                           
  1738                           ;soft_uart_8_9600.c: 127: putc(s[i]);
  1739  065B  0826               	movf	puts@i,w
  1740  065C  0727               	addwf	puts@s,w
  1741  065D  0084               	movwf	4
  1742  065E  2400               	fcall	stringdir
  1743  065F  235B               	fcall	_putc
  1744  0660  3001               	movlw	1
  1745  0661  1283               	bcf	3,5	;RP0=0, select bank0
  1746  0662  00A5               	movwf	??_puts
  1747  0663  0825               	movf	??_puts,w
  1748  0664  07A6               	addwf	puts@i,f
  1749  0665  2E54               	goto	l1473
  1750  0666                     __end_of_puts:	
  1751                           
  1752                           	psect	text9
  1753  01B5                     __ptext9:	
  1754 ;; *************** function _putn *****************
  1755 ;; Defined at:
  1756 ;;		line 136 in file "soft_uart_8_9600.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  n               4   24[BANK0 ] long 
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;  i               1   32[BANK0 ] unsigned char 
  1761 ;;  dig             1   31[BANK0 ] unsigned char 
  1762 ;;  z               1   30[BANK0 ] unsigned char 
  1763 ;; Return value:  Size  Location     Type
  1764 ;;		None               void
  1765 ;; Registers used:
  1766 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1767 ;; Tracked objects:
  1768 ;;		On entry : 0/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMMON   BANK0   BANK1
  1772 ;;      Params:         0       4       0
  1773 ;;      Locals:         0       3       0
  1774 ;;      Temps:          0       2       0
  1775 ;;      Totals:         0       9       0
  1776 ;;Total ram usage:        9 bytes
  1777 ;; Hardware stack levels used:    1
  1778 ;; Hardware stack levels required when called:    3
  1779 ;; This function calls:
  1780 ;;		___almod
  1781 ;;		___lldiv
  1782 ;;		___llmod
  1783 ;;		_putc
  1784 ;; This function is called by:
  1785 ;;		_showParams
  1786 ;;		_exeCmd
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           
  1791                           ;psect for function _putn
  1792  01B5                     _putn:	
  1793                           
  1794                           ;soft_uart_8_9600.c: 137: uint8_t z;
  1795                           ;soft_uart_8_9600.c: 138: uint8_t dig, i;
  1796                           ;soft_uart_8_9600.c: 139: const uint32_t decaShift[] = {10000000, 1000000, 100000, 10000
      +                          , 1000, 100, 10};
  1797                           ;soft_uart_8_9600.c: 141: if(n<0) {
  1798                           
  1799                           ;incstack = 0
  1800                           ; Regs used in _putn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1801  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  1802  01B6  1FBB               	btfss	putn@n+3,7
  1803  01B7  29C5               	goto	l1481
  1804                           
  1805                           ;soft_uart_8_9600.c: 142: n = -n;
  1806  01B8  09B8               	comf	putn@n,f
  1807  01B9  09B9               	comf	putn@n+1,f
  1808  01BA  09BA               	comf	putn@n+2,f
  1809  01BB  09BB               	comf	putn@n+3,f
  1810  01BC  0AB8               	incf	putn@n,f
  1811  01BD  1903               	skipnz
  1812  01BE  0AB9               	incf	putn@n+1,f
  1813  01BF  1903               	skipnz
  1814  01C0  0ABA               	incf	putn@n+2,f
  1815  01C1  1903               	skipnz
  1816  01C2  0ABB               	incf	putn@n+3,f
  1817                           
  1818                           ;soft_uart_8_9600.c: 143: putc('-');
  1819  01C3  302D               	movlw	45
  1820  01C4  235B               	fcall	_putc
  1821  01C5                     l1481:	
  1822                           
  1823                           ;soft_uart_8_9600.c: 144: }
  1824                           ;soft_uart_8_9600.c: 146: z = 1;
  1825  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  1826  01C6  01BE               	clrf	putn@z
  1827  01C7  0ABE               	incf	putn@z,f
  1828                           
  1829                           ;soft_uart_8_9600.c: 148: for(i=0; i<7; i++) {
  1830  01C8  01C0               	clrf	putn@i
  1831  01C9  3007               	movlw	7
  1832  01CA  0240               	subwf	putn@i,w
  1833  01CB  1803               	btfsc	3,0
  1834  01CC  2A15               	goto	l1505
  1835  01CD                     l1489:	
  1836                           
  1837                           ;soft_uart_8_9600.c: 149: dig = ((n/decaShift[i])%10)+'0';
  1838  01CD  3000               	movlw	0
  1839  01CE  00B1               	movwf	___llmod@divisor+3
  1840  01CF  3000               	movlw	0
  1841  01D0  00B0               	movwf	___llmod@divisor+2
  1842  01D1  3000               	movlw	0
  1843  01D2  00AF               	movwf	___llmod@divisor+1
  1844  01D3  300A               	movlw	10
  1845  01D4  00AE               	movwf	___llmod@divisor
  1846  01D5  0840               	movf	putn@i,w
  1847  01D6  00BC               	movwf	??_putn
  1848  01D7  3001               	movlw	1
  1849  01D8                     u1515:	
  1850  01D8  1003               	clrc
  1851  01D9  0DBC               	rlf	??_putn,f
  1852  01DA  3EFF               	addlw	-1
  1853  01DB  1D03               	skipz
  1854  01DC  29D8               	goto	u1515
  1855  01DD  1003               	clrc
  1856  01DE  0D3C               	rlf	??_putn,w
  1857  01DF  3E01               	addlw	low ((putn@decaShift-__stringbase)| (0+32768))
  1858  01E0  0084               	movwf	4
  1859  01E1  2400               	fcall	stringdir
  1860  01E2  00A0               	movwf	___lldiv@divisor
  1861  01E3  2400               	fcall	stringdir
  1862  01E4  00A1               	movwf	___lldiv@divisor+1
  1863  01E5  2400               	fcall	stringdir
  1864  01E6  00A2               	movwf	___lldiv@divisor+2
  1865  01E7  2400               	fcall	stringdir
  1866  01E8  00A3               	movwf	___lldiv@divisor+3
  1867  01E9  083B               	movf	putn@n+3,w
  1868  01EA  00A7               	movwf	___lldiv@dividend+3
  1869  01EB  083A               	movf	putn@n+2,w
  1870  01EC  00A6               	movwf	___lldiv@dividend+2
  1871  01ED  0839               	movf	putn@n+1,w
  1872  01EE  00A5               	movwf	___lldiv@dividend+1
  1873  01EF  0838               	movf	putn@n,w
  1874  01F0  00A4               	movwf	___lldiv@dividend
  1875  01F1  22A7               	fcall	___lldiv
  1876  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1877  01F3  0823               	movf	?___lldiv+3,w
  1878  01F4  00B5               	movwf	___llmod@dividend+3
  1879  01F5  0822               	movf	?___lldiv+2,w
  1880  01F6  00B4               	movwf	___llmod@dividend+2
  1881  01F7  0821               	movf	?___lldiv+1,w
  1882  01F8  00B3               	movwf	___llmod@dividend+1
  1883  01F9  0820               	movf	?___lldiv,w
  1884  01FA  00B2               	movwf	___llmod@dividend
  1885  01FB  23AB               	fcall	___llmod
  1886  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  1887  01FD  082E               	movf	?___llmod,w
  1888  01FE  3E30               	addlw	48
  1889  01FF  00BD               	movwf	??_putn+1
  1890  0200  083D               	movf	??_putn+1,w
  1891  0201  00BF               	movwf	putn@dig
  1892                           
  1893                           ;soft_uart_8_9600.c: 150: if(z==1 && dig=='0') {}
  1894  0202  033E               	decf	putn@z,w
  1895  0203  1D03               	btfss	3,2
  1896  0204  2A09               	goto	l1497
  1897  0205  3030               	movlw	48
  1898  0206  063F               	xorwf	putn@dig,w
  1899  0207  1903               	btfsc	3,2
  1900  0208  2A0C               	goto	l1501
  1901  0209                     l1497:	
  1902                           
  1903                           ;soft_uart_8_9600.c: 151: else {z = 0; putc(dig);}
  1904  0209  01BE               	clrf	putn@z
  1905  020A  083F               	movf	putn@dig,w
  1906  020B  235B               	fcall	_putc
  1907  020C                     l1501:	
  1908  020C  3001               	movlw	1
  1909  020D  1283               	bcf	3,5	;RP0=0, select bank0
  1910  020E  00BC               	movwf	??_putn
  1911  020F  083C               	movf	??_putn,w
  1912  0210  07C0               	addwf	putn@i,f
  1913  0211  3007               	movlw	7
  1914  0212  0240               	subwf	putn@i,w
  1915  0213  1C03               	skipc
  1916  0214  29CD               	goto	l1489
  1917  0215                     l1505:	
  1918                           
  1919                           ;soft_uart_8_9600.c: 152: }
  1920                           ;soft_uart_8_9600.c: 154: dig = ((n)%10)+'0';
  1921  0215  3000               	movlw	0
  1922  0216  00A3               	movwf	___almod@divisor+3
  1923  0217  3000               	movlw	0
  1924  0218  00A2               	movwf	___almod@divisor+2
  1925  0219  3000               	movlw	0
  1926  021A  00A1               	movwf	___almod@divisor+1
  1927  021B  300A               	movlw	10
  1928  021C  00A0               	movwf	___almod@divisor
  1929  021D  083B               	movf	putn@n+3,w
  1930  021E  00A7               	movwf	___almod@dividend+3
  1931  021F  083A               	movf	putn@n+2,w
  1932  0220  00A6               	movwf	___almod@dividend+2
  1933  0221  0839               	movf	putn@n+1,w
  1934  0222  00A5               	movwf	___almod@dividend+1
  1935  0223  0838               	movf	putn@n,w
  1936  0224  00A4               	movwf	___almod@dividend
  1937  0225  222F               	fcall	___almod
  1938  0226  1283               	bcf	3,5	;RP0=0, select bank0
  1939  0227  0820               	movf	?___almod,w
  1940  0228  3E30               	addlw	48
  1941  0229  00BC               	movwf	??_putn
  1942  022A  083C               	movf	??_putn,w
  1943  022B  00BF               	movwf	putn@dig
  1944                           
  1945                           ;soft_uart_8_9600.c: 157: putc(dig);
  1946  022C  083F               	movf	putn@dig,w
  1947  022D  235B               	fcall	_putc
  1948  022E  0008               	return
  1949  022F                     __end_of_putn:	
  1950                           
  1951                           	psect	text10
  1952  03AB                     __ptext10:	
  1953 ;; *************** function ___llmod *****************
  1954 ;; Defined at:
  1955 ;;		line 6 in file "/opt/microchip/xc8/v1.34/sources/common/llmod.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;  divisor         4   14[BANK0 ] unsigned long 
  1958 ;;  dividend        4   18[BANK0 ] unsigned long 
  1959 ;; Auto vars:     Size  Location     Type
  1960 ;;  counter         1   23[BANK0 ] unsigned char 
  1961 ;; Return value:  Size  Location     Type
  1962 ;;                  4   14[BANK0 ] unsigned long 
  1963 ;; Registers used:
  1964 ;;		wreg, status,2, status,0
  1965 ;; Tracked objects:
  1966 ;;		On entry : 0/0
  1967 ;;		On exit  : 0/0
  1968 ;;		Unchanged: 0/0
  1969 ;; Data sizes:     COMMON   BANK0   BANK1
  1970 ;;      Params:         0       8       0
  1971 ;;      Locals:         0       1       0
  1972 ;;      Temps:          0       1       0
  1973 ;;      Totals:         0      10       0
  1974 ;;Total ram usage:       10 bytes
  1975 ;; Hardware stack levels used:    1
  1976 ;; Hardware stack levels required when called:    2
  1977 ;; This function calls:
  1978 ;;		Nothing
  1979 ;; This function is called by:
  1980 ;;		_putn
  1981 ;;		_main
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           
  1986                           ;psect for function ___llmod
  1987  03AB                     ___llmod:	
  1988                           
  1989                           ;incstack = 0
  1990                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  1991  03AB  1283               	bcf	3,5	;RP0=0, select bank0
  1992  03AC  0831               	movf	___llmod@divisor+3,w
  1993  03AD  0430               	iorwf	___llmod@divisor+2,w
  1994  03AE  042F               	iorwf	___llmod@divisor+1,w
  1995  03AF  042E               	iorwf	___llmod@divisor,w
  1996  03B0  1903               	skipnz
  1997  03B1  2BEF               	goto	l1463
  1998  03B2  01B7               	clrf	___llmod@counter
  1999  03B3  0AB7               	incf	___llmod@counter,f
  2000  03B4                     l1453:	
  2001  03B4  1BB1               	btfsc	___llmod@divisor+3,7
  2002  03B5  2BC4               	goto	l1455
  2003  03B6  3001               	movlw	1
  2004  03B7  00B6               	movwf	??___llmod
  2005  03B8                     u1435:	
  2006  03B8  1003               	clrc
  2007  03B9  0DAE               	rlf	___llmod@divisor,f
  2008  03BA  0DAF               	rlf	___llmod@divisor+1,f
  2009  03BB  0DB0               	rlf	___llmod@divisor+2,f
  2010  03BC  0DB1               	rlf	___llmod@divisor+3,f
  2011  03BD  0BB6               	decfsz	??___llmod,f
  2012  03BE  2BB8               	goto	u1435
  2013  03BF  3001               	movlw	1
  2014  03C0  00B6               	movwf	??___llmod
  2015  03C1  0836               	movf	??___llmod,w
  2016  03C2  07B7               	addwf	___llmod@counter,f
  2017  03C3  2BB4               	goto	l1453
  2018  03C4                     l1455:	
  2019  03C4  0831               	movf	___llmod@divisor+3,w
  2020  03C5  0235               	subwf	___llmod@dividend+3,w
  2021  03C6  1D03               	skipz
  2022  03C7  2BD2               	goto	u1455
  2023  03C8  0830               	movf	___llmod@divisor+2,w
  2024  03C9  0234               	subwf	___llmod@dividend+2,w
  2025  03CA  1D03               	skipz
  2026  03CB  2BD2               	goto	u1455
  2027  03CC  082F               	movf	___llmod@divisor+1,w
  2028  03CD  0233               	subwf	___llmod@dividend+1,w
  2029  03CE  1D03               	skipz
  2030  03CF  2BD2               	goto	u1455
  2031  03D0  082E               	movf	___llmod@divisor,w
  2032  03D1  0232               	subwf	___llmod@dividend,w
  2033  03D2                     u1455:	
  2034  03D2  1C03               	skipc
  2035  03D3  2BE2               	goto	l1459
  2036  03D4  082E               	movf	___llmod@divisor,w
  2037  03D5  02B2               	subwf	___llmod@dividend,f
  2038  03D6  082F               	movf	___llmod@divisor+1,w
  2039  03D7  1C03               	skipc
  2040  03D8  0F2F               	incfsz	___llmod@divisor+1,w
  2041  03D9  02B3               	subwf	___llmod@dividend+1,f
  2042  03DA  0830               	movf	___llmod@divisor+2,w
  2043  03DB  1C03               	skipc
  2044  03DC  0F30               	incfsz	___llmod@divisor+2,w
  2045  03DD  02B4               	subwf	___llmod@dividend+2,f
  2046  03DE  0831               	movf	___llmod@divisor+3,w
  2047  03DF  1C03               	skipc
  2048  03E0  0F31               	incfsz	___llmod@divisor+3,w
  2049  03E1  02B5               	subwf	___llmod@dividend+3,f
  2050  03E2                     l1459:	
  2051  03E2  3001               	movlw	1
  2052  03E3                     u1465:	
  2053  03E3  1003               	clrc
  2054  03E4  0CB1               	rrf	___llmod@divisor+3,f
  2055  03E5  0CB0               	rrf	___llmod@divisor+2,f
  2056  03E6  0CAF               	rrf	___llmod@divisor+1,f
  2057  03E7  0CAE               	rrf	___llmod@divisor,f
  2058  03E8  3EFF               	addlw	-1
  2059  03E9  1D03               	skipz
  2060  03EA  2BE3               	goto	u1465
  2061  03EB  3001               	movlw	1
  2062  03EC  02B7               	subwf	___llmod@counter,f
  2063  03ED  1D03               	btfss	3,2
  2064  03EE  2BC4               	goto	l1455
  2065  03EF                     l1463:	
  2066  03EF  0835               	movf	___llmod@dividend+3,w
  2067  03F0  00B1               	movwf	?___llmod+3
  2068  03F1  0834               	movf	___llmod@dividend+2,w
  2069  03F2  00B0               	movwf	?___llmod+2
  2070  03F3  0833               	movf	___llmod@dividend+1,w
  2071  03F4  00AF               	movwf	?___llmod+1
  2072  03F5  0832               	movf	___llmod@dividend,w
  2073  03F6  00AE               	movwf	?___llmod
  2074  03F7  0008               	return
  2075  03F8                     __end_of___llmod:	
  2076                           
  2077                           	psect	text11
  2078  02A7                     __ptext11:	
  2079 ;; *************** function ___lldiv *****************
  2080 ;; Defined at:
  2081 ;;		line 6 in file "/opt/microchip/xc8/v1.34/sources/common/lldiv.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;  divisor         4    0[BANK0 ] unsigned long 
  2084 ;;  dividend        4    4[BANK0 ] unsigned long 
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;  quotient        4    9[BANK0 ] unsigned long 
  2087 ;;  counter         1   13[BANK0 ] unsigned char 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  4    0[BANK0 ] unsigned long 
  2090 ;; Registers used:
  2091 ;;		wreg, status,2, status,0
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMMON   BANK0   BANK1
  2097 ;;      Params:         0       8       0
  2098 ;;      Locals:         0       5       0
  2099 ;;      Temps:          0       1       0
  2100 ;;      Totals:         0      14       0
  2101 ;;Total ram usage:       14 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    2
  2104 ;; This function calls:
  2105 ;;		Nothing
  2106 ;; This function is called by:
  2107 ;;		_putn
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           
  2112                           ;psect for function ___lldiv
  2113  02A7                     ___lldiv:	
  2114                           
  2115                           ;incstack = 0
  2116                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2117  02A7  3000               	movlw	0
  2118  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  2119  02A9  00AC               	movwf	___lldiv@quotient+3
  2120  02AA  3000               	movlw	0
  2121  02AB  00AB               	movwf	___lldiv@quotient+2
  2122  02AC  3000               	movlw	0
  2123  02AD  00AA               	movwf	___lldiv@quotient+1
  2124  02AE  3000               	movlw	0
  2125  02AF  00A9               	movwf	___lldiv@quotient
  2126  02B0  0823               	movf	___lldiv@divisor+3,w
  2127  02B1  0422               	iorwf	___lldiv@divisor+2,w
  2128  02B2  0421               	iorwf	___lldiv@divisor+1,w
  2129  02B3  0420               	iorwf	___lldiv@divisor,w
  2130  02B4  1903               	skipnz
  2131  02B5  2AFD               	goto	l1443
  2132  02B6  01AD               	clrf	___lldiv@counter
  2133  02B7  0AAD               	incf	___lldiv@counter,f
  2134  02B8                     l1429:	
  2135  02B8  1BA3               	btfsc	___lldiv@divisor+3,7
  2136  02B9  2AC8               	goto	l1431
  2137  02BA  3001               	movlw	1
  2138  02BB  00A8               	movwf	??___lldiv
  2139  02BC                     u1365:	
  2140  02BC  1003               	clrc
  2141  02BD  0DA0               	rlf	___lldiv@divisor,f
  2142  02BE  0DA1               	rlf	___lldiv@divisor+1,f
  2143  02BF  0DA2               	rlf	___lldiv@divisor+2,f
  2144  02C0  0DA3               	rlf	___lldiv@divisor+3,f
  2145  02C1  0BA8               	decfsz	??___lldiv,f
  2146  02C2  2ABC               	goto	u1365
  2147  02C3  3001               	movlw	1
  2148  02C4  00A8               	movwf	??___lldiv
  2149  02C5  0828               	movf	??___lldiv,w
  2150  02C6  07AD               	addwf	___lldiv@counter,f
  2151  02C7  2AB8               	goto	l1429
  2152  02C8                     l1431:	
  2153  02C8  3001               	movlw	1
  2154  02C9  00A8               	movwf	??___lldiv
  2155  02CA                     u1385:	
  2156  02CA  1003               	clrc
  2157  02CB  0DA9               	rlf	___lldiv@quotient,f
  2158  02CC  0DAA               	rlf	___lldiv@quotient+1,f
  2159  02CD  0DAB               	rlf	___lldiv@quotient+2,f
  2160  02CE  0DAC               	rlf	___lldiv@quotient+3,f
  2161  02CF  0BA8               	decfsz	??___lldiv,f
  2162  02D0  2ACA               	goto	u1385
  2163  02D1  0823               	movf	___lldiv@divisor+3,w
  2164  02D2  0227               	subwf	___lldiv@dividend+3,w
  2165  02D3  1D03               	skipz
  2166  02D4  2ADF               	goto	u1395
  2167  02D5  0822               	movf	___lldiv@divisor+2,w
  2168  02D6  0226               	subwf	___lldiv@dividend+2,w
  2169  02D7  1D03               	skipz
  2170  02D8  2ADF               	goto	u1395
  2171  02D9  0821               	movf	___lldiv@divisor+1,w
  2172  02DA  0225               	subwf	___lldiv@dividend+1,w
  2173  02DB  1D03               	skipz
  2174  02DC  2ADF               	goto	u1395
  2175  02DD  0820               	movf	___lldiv@divisor,w
  2176  02DE  0224               	subwf	___lldiv@dividend,w
  2177  02DF                     u1395:	
  2178  02DF  1C03               	skipc
  2179  02E0  2AF0               	goto	l1439
  2180  02E1  0820               	movf	___lldiv@divisor,w
  2181  02E2  02A4               	subwf	___lldiv@dividend,f
  2182  02E3  0821               	movf	___lldiv@divisor+1,w
  2183  02E4  1C03               	skipc
  2184  02E5  0F21               	incfsz	___lldiv@divisor+1,w
  2185  02E6  02A5               	subwf	___lldiv@dividend+1,f
  2186  02E7  0822               	movf	___lldiv@divisor+2,w
  2187  02E8  1C03               	skipc
  2188  02E9  0F22               	incfsz	___lldiv@divisor+2,w
  2189  02EA  02A6               	subwf	___lldiv@dividend+2,f
  2190  02EB  0823               	movf	___lldiv@divisor+3,w
  2191  02EC  1C03               	skipc
  2192  02ED  0F23               	incfsz	___lldiv@divisor+3,w
  2193  02EE  02A7               	subwf	___lldiv@dividend+3,f
  2194  02EF  1429               	bsf	___lldiv@quotient,0
  2195  02F0                     l1439:	
  2196  02F0  3001               	movlw	1
  2197  02F1                     u1405:	
  2198  02F1  1003               	clrc
  2199  02F2  0CA3               	rrf	___lldiv@divisor+3,f
  2200  02F3  0CA2               	rrf	___lldiv@divisor+2,f
  2201  02F4  0CA1               	rrf	___lldiv@divisor+1,f
  2202  02F5  0CA0               	rrf	___lldiv@divisor,f
  2203  02F6  3EFF               	addlw	-1
  2204  02F7  1D03               	skipz
  2205  02F8  2AF1               	goto	u1405
  2206  02F9  3001               	movlw	1
  2207  02FA  02AD               	subwf	___lldiv@counter,f
  2208  02FB  1D03               	btfss	3,2
  2209  02FC  2AC8               	goto	l1431
  2210  02FD                     l1443:	
  2211  02FD  082C               	movf	___lldiv@quotient+3,w
  2212  02FE  00A3               	movwf	?___lldiv+3
  2213  02FF  082B               	movf	___lldiv@quotient+2,w
  2214  0300  00A2               	movwf	?___lldiv+2
  2215  0301  082A               	movf	___lldiv@quotient+1,w
  2216  0302  00A1               	movwf	?___lldiv+1
  2217  0303  0829               	movf	___lldiv@quotient,w
  2218  0304  00A0               	movwf	?___lldiv
  2219  0305  0008               	return
  2220  0306                     __end_of___lldiv:	
  2221                           
  2222                           	psect	text12
  2223  022F                     __ptext12:	
  2224 ;; *************** function ___almod *****************
  2225 ;; Defined at:
  2226 ;;		line 5 in file "/opt/microchip/xc8/v1.34/sources/common/almod.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;  divisor         4    0[BANK0 ] long 
  2229 ;;  dividend        4    4[BANK0 ] long 
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;  sign            1   10[BANK0 ] unsigned char 
  2232 ;;  counter         1    9[BANK0 ] unsigned char 
  2233 ;; Return value:  Size  Location     Type
  2234 ;;                  4    0[BANK0 ] long 
  2235 ;; Registers used:
  2236 ;;		wreg, status,2, status,0
  2237 ;; Tracked objects:
  2238 ;;		On entry : 0/0
  2239 ;;		On exit  : 0/0
  2240 ;;		Unchanged: 0/0
  2241 ;; Data sizes:     COMMON   BANK0   BANK1
  2242 ;;      Params:         0       8       0
  2243 ;;      Locals:         0       2       0
  2244 ;;      Temps:          0       1       0
  2245 ;;      Totals:         0      11       0
  2246 ;;Total ram usage:       11 bytes
  2247 ;; Hardware stack levels used:    1
  2248 ;; Hardware stack levels required when called:    2
  2249 ;; This function calls:
  2250 ;;		Nothing
  2251 ;; This function is called by:
  2252 ;;		_putn
  2253 ;; This function uses a non-reentrant model
  2254 ;;
  2255                           
  2256                           
  2257                           ;psect for function ___almod
  2258  022F                     ___almod:	
  2259                           
  2260                           ;incstack = 0
  2261                           ; Regs used in ___almod: [wreg+status,2+status,0]
  2262  022F  1283               	bcf	3,5	;RP0=0, select bank0
  2263  0230  01AA               	clrf	___almod@sign
  2264  0231  1FA7               	btfss	___almod@dividend+3,7
  2265  0232  2A40               	goto	l368
  2266  0233  09A4               	comf	___almod@dividend,f
  2267  0234  09A5               	comf	___almod@dividend+1,f
  2268  0235  09A6               	comf	___almod@dividend+2,f
  2269  0236  09A7               	comf	___almod@dividend+3,f
  2270  0237  0AA4               	incf	___almod@dividend,f
  2271  0238  1903               	skipnz
  2272  0239  0AA5               	incf	___almod@dividend+1,f
  2273  023A  1903               	skipnz
  2274  023B  0AA6               	incf	___almod@dividend+2,f
  2275  023C  1903               	skipnz
  2276  023D  0AA7               	incf	___almod@dividend+3,f
  2277  023E  01AA               	clrf	___almod@sign
  2278  023F  0AAA               	incf	___almod@sign,f
  2279  0240                     l368:	
  2280  0240  1FA3               	btfss	___almod@divisor+3,7
  2281  0241  2A4D               	goto	l1399
  2282  0242  09A0               	comf	___almod@divisor,f
  2283  0243  09A1               	comf	___almod@divisor+1,f
  2284  0244  09A2               	comf	___almod@divisor+2,f
  2285  0245  09A3               	comf	___almod@divisor+3,f
  2286  0246  0AA0               	incf	___almod@divisor,f
  2287  0247  1903               	skipnz
  2288  0248  0AA1               	incf	___almod@divisor+1,f
  2289  0249  1903               	skipnz
  2290  024A  0AA2               	incf	___almod@divisor+2,f
  2291  024B  1903               	skipnz
  2292  024C  0AA3               	incf	___almod@divisor+3,f
  2293  024D                     l1399:	
  2294  024D  0823               	movf	___almod@divisor+3,w
  2295  024E  0422               	iorwf	___almod@divisor+2,w
  2296  024F  0421               	iorwf	___almod@divisor+1,w
  2297  0250  0420               	iorwf	___almod@divisor,w
  2298  0251  1903               	skipnz
  2299  0252  2A90               	goto	l1415
  2300  0253  01A9               	clrf	___almod@counter
  2301  0254  0AA9               	incf	___almod@counter,f
  2302  0255                     l1405:	
  2303  0255  1BA3               	btfsc	___almod@divisor+3,7
  2304  0256  2A65               	goto	l1407
  2305  0257  3001               	movlw	1
  2306  0258  00A8               	movwf	??___almod
  2307  0259                     u1295:	
  2308  0259  1003               	clrc
  2309  025A  0DA0               	rlf	___almod@divisor,f
  2310  025B  0DA1               	rlf	___almod@divisor+1,f
  2311  025C  0DA2               	rlf	___almod@divisor+2,f
  2312  025D  0DA3               	rlf	___almod@divisor+3,f
  2313  025E  0BA8               	decfsz	??___almod,f
  2314  025F  2A59               	goto	u1295
  2315  0260  3001               	movlw	1
  2316  0261  00A8               	movwf	??___almod
  2317  0262  0828               	movf	??___almod,w
  2318  0263  07A9               	addwf	___almod@counter,f
  2319  0264  2A55               	goto	l1405
  2320  0265                     l1407:	
  2321  0265  0823               	movf	___almod@divisor+3,w
  2322  0266  0227               	subwf	___almod@dividend+3,w
  2323  0267  1D03               	skipz
  2324  0268  2A73               	goto	u1315
  2325  0269  0822               	movf	___almod@divisor+2,w
  2326  026A  0226               	subwf	___almod@dividend+2,w
  2327  026B  1D03               	skipz
  2328  026C  2A73               	goto	u1315
  2329  026D  0821               	movf	___almod@divisor+1,w
  2330  026E  0225               	subwf	___almod@dividend+1,w
  2331  026F  1D03               	skipz
  2332  0270  2A73               	goto	u1315
  2333  0271  0820               	movf	___almod@divisor,w
  2334  0272  0224               	subwf	___almod@dividend,w
  2335  0273                     u1315:	
  2336  0273  1C03               	skipc
  2337  0274  2A83               	goto	l1411
  2338  0275  0820               	movf	___almod@divisor,w
  2339  0276  02A4               	subwf	___almod@dividend,f
  2340  0277  0821               	movf	___almod@divisor+1,w
  2341  0278  1C03               	skipc
  2342  0279  0F21               	incfsz	___almod@divisor+1,w
  2343  027A  02A5               	subwf	___almod@dividend+1,f
  2344  027B  0822               	movf	___almod@divisor+2,w
  2345  027C  1C03               	skipc
  2346  027D  0F22               	incfsz	___almod@divisor+2,w
  2347  027E  02A6               	subwf	___almod@dividend+2,f
  2348  027F  0823               	movf	___almod@divisor+3,w
  2349  0280  1C03               	skipc
  2350  0281  0F23               	incfsz	___almod@divisor+3,w
  2351  0282  02A7               	subwf	___almod@dividend+3,f
  2352  0283                     l1411:	
  2353  0283  3001               	movlw	1
  2354  0284                     u1325:	
  2355  0284  1003               	clrc
  2356  0285  0CA3               	rrf	___almod@divisor+3,f
  2357  0286  0CA2               	rrf	___almod@divisor+2,f
  2358  0287  0CA1               	rrf	___almod@divisor+1,f
  2359  0288  0CA0               	rrf	___almod@divisor,f
  2360  0289  3EFF               	addlw	-1
  2361  028A  1D03               	skipz
  2362  028B  2A84               	goto	u1325
  2363  028C  3001               	movlw	1
  2364  028D  02A9               	subwf	___almod@counter,f
  2365  028E  1D03               	btfss	3,2
  2366  028F  2A65               	goto	l1407
  2367  0290                     l1415:	
  2368  0290  082A               	movf	___almod@sign,w
  2369  0291  1903               	btfsc	3,2
  2370  0292  2A9E               	goto	l1419
  2371  0293  09A4               	comf	___almod@dividend,f
  2372  0294  09A5               	comf	___almod@dividend+1,f
  2373  0295  09A6               	comf	___almod@dividend+2,f
  2374  0296  09A7               	comf	___almod@dividend+3,f
  2375  0297  0AA4               	incf	___almod@dividend,f
  2376  0298  1903               	skipnz
  2377  0299  0AA5               	incf	___almod@dividend+1,f
  2378  029A  1903               	skipnz
  2379  029B  0AA6               	incf	___almod@dividend+2,f
  2380  029C  1903               	skipnz
  2381  029D  0AA7               	incf	___almod@dividend+3,f
  2382  029E                     l1419:	
  2383  029E  0827               	movf	___almod@dividend+3,w
  2384  029F  00A3               	movwf	?___almod+3
  2385  02A0  0826               	movf	___almod@dividend+2,w
  2386  02A1  00A2               	movwf	?___almod+2
  2387  02A2  0825               	movf	___almod@dividend+1,w
  2388  02A3  00A1               	movwf	?___almod+1
  2389  02A4  0824               	movf	___almod@dividend,w
  2390  02A5  00A0               	movwf	?___almod
  2391  02A6  0008               	return
  2392  02A7                     __end_of___almod:	
  2393                           
  2394                           	psect	text13
  2395  06AC                     __ptext13:	
  2396 ;; *************** function _putLF *****************
  2397 ;; Defined at:
  2398 ;;		line 162 in file "soft_uart_8_9600.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;		None
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;		None
  2403 ;; Return value:  Size  Location     Type
  2404 ;;		None               void
  2405 ;; Registers used:
  2406 ;;		wreg, status,2, status,0, pclath, cstack
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMMON   BANK0   BANK1
  2412 ;;      Params:         0       0       0
  2413 ;;      Locals:         0       0       0
  2414 ;;      Temps:          0       0       0
  2415 ;;      Totals:         0       0       0
  2416 ;;Total ram usage:        0 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:    3
  2419 ;; This function calls:
  2420 ;;		_putc
  2421 ;; This function is called by:
  2422 ;;		_showParams
  2423 ;;		_exeCmd
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           
  2428                           ;psect for function _putLF
  2429  06AC                     _putLF:	
  2430                           
  2431                           ;soft_uart_8_9600.c: 163: putc('\n');
  2432                           
  2433                           ;incstack = 0
  2434                           ; Regs used in _putLF: [wreg+status,2+status,0+pclath+cstack]
  2435  06AC  300A               	movlw	10
  2436  06AD  235B               	fcall	_putc
  2437  06AE  0008               	return
  2438  06AF                     __end_of_putLF:	
  2439                           
  2440                           	psect	text14
  2441  035B                     __ptext14:	
  2442 ;; *************** function _putc *****************
  2443 ;; Defined at:
  2444 ;;		line 80 in file "soft_uart_8_9600.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;  data            1    wreg     unsigned char 
  2447 ;; Auto vars:     Size  Location     Type
  2448 ;;  data            1    2[BANK0 ] unsigned char 
  2449 ;;  j               1    4[BANK0 ] unsigned char 
  2450 ;;  i               1    3[BANK0 ] unsigned char 
  2451 ;; Return value:  Size  Location     Type
  2452 ;;		None               void
  2453 ;; Registers used:
  2454 ;;		wreg, status,2, status,0
  2455 ;; Tracked objects:
  2456 ;;		On entry : 0/0
  2457 ;;		On exit  : 0/0
  2458 ;;		Unchanged: 0/0
  2459 ;; Data sizes:     COMMON   BANK0   BANK1
  2460 ;;      Params:         0       0       0
  2461 ;;      Locals:         0       3       0
  2462 ;;      Temps:          0       2       0
  2463 ;;      Totals:         0       5       0
  2464 ;;Total ram usage:        5 bytes
  2465 ;; Hardware stack levels used:    1
  2466 ;; Hardware stack levels required when called:    2
  2467 ;; This function calls:
  2468 ;;		Nothing
  2469 ;; This function is called by:
  2470 ;;		_puts
  2471 ;;		_putn
  2472 ;;		_putLF
  2473 ;;		_showParams
  2474 ;;		_exeCmd
  2475 ;; This function uses a non-reentrant model
  2476 ;;
  2477                           
  2478                           
  2479                           ;psect for function _putc
  2480  035B                     _putc:	
  2481                           
  2482                           ;incstack = 0
  2483                           ; Regs used in _putc: [wreg+status,2+status,0]
  2484                           ;putc@data stored from wreg
  2485  035B  1283               	bcf	3,5	;RP0=0, select bank0
  2486  035C  00A2               	movwf	putc@data
  2487                           
  2488                           ;soft_uart_8_9600.c: 81: uint8_t i, j;
  2489                           ;soft_uart_8_9600.c: 87: PORTAbits.RA1 = 0;
  2490  035D  1085               	bcf	5,1	;volatile
  2491                           
  2492                           ;soft_uart_8_9600.c: 90: for(j=0; j<19; j++) {
  2493  035E  01A4               	clrf	putc@j
  2494  035F  3013               	movlw	19
  2495  0360  0224               	subwf	putc@j,w
  2496  0361  1803               	btfsc	3,0
  2497  0362  2B6D               	goto	l64
  2498  0363                     l63:	
  2499  0363  0000               	nop	;# 
  2500  0364  3001               	movlw	1
  2501  0365  1283               	bcf	3,5	;RP0=0, select bank0
  2502  0366  00A0               	movwf	??_putc
  2503  0367  0820               	movf	??_putc,w
  2504  0368  07A4               	addwf	putc@j,f
  2505  0369  3013               	movlw	19
  2506  036A  0224               	subwf	putc@j,w
  2507  036B  1C03               	skipc
  2508  036C  2B63               	goto	l63
  2509  036D                     l64:	
  2510  036D  0000               	nop	;# 
  2511  036E  0000               	nop	;# 
  2512  036F  0000               	nop	;# 
  2513  0370  0000               	nop	;# 
  2514                           
  2515                           ;soft_uart_8_9600.c: 103: for(i=0; i<8; i++) {
  2516  0371  1283               	bcf	3,5	;RP0=0, select bank0
  2517  0372  01A3               	clrf	putc@i
  2518  0373  3008               	movlw	8
  2519  0374  0223               	subwf	putc@i,w
  2520  0375  1803               	btfsc	3,0
  2521  0376  2B9E               	goto	l66
  2522  0377                     l1335:	
  2523                           
  2524                           ;soft_uart_8_9600.c: 105: PORTAbits.RA1 = data & 0x01;
  2525  0377  0822               	movf	putc@data,w
  2526  0378  3901               	andlw	1
  2527  0379  00A0               	movwf	??_putc
  2528  037A  0DA0               	rlf	??_putc,f
  2529  037B  0805               	movf	5,w	;volatile
  2530  037C  0620               	xorwf	??_putc,w
  2531  037D  39FD               	andlw	-3
  2532  037E  0620               	xorwf	??_putc,w
  2533  037F  0085               	movwf	5	;volatile
  2534                           
  2535                           ;soft_uart_8_9600.c: 106: data = data >> 1;
  2536  0380  0822               	movf	putc@data,w
  2537  0381  00A0               	movwf	??_putc
  2538  0382  1003               	clrc
  2539  0383  0C20               	rrf	??_putc,w
  2540  0384  00A1               	movwf	??_putc+1
  2541  0385  0821               	movf	??_putc+1,w
  2542  0386  00A2               	movwf	putc@data
  2543                           
  2544                           ;soft_uart_8_9600.c: 108: for(j=0; j<16; j++) {
  2545  0387  01A4               	clrf	putc@j
  2546  0388  3010               	movlw	16
  2547  0389  0224               	subwf	putc@j,w
  2548  038A  1803               	btfsc	3,0
  2549  038B  2B96               	goto	l1347
  2550  038C                     l67:	
  2551  038C  0000               	nop	;# 
  2552  038D  3001               	movlw	1
  2553  038E  1283               	bcf	3,5	;RP0=0, select bank0
  2554  038F  00A0               	movwf	??_putc
  2555  0390  0820               	movf	??_putc,w
  2556  0391  07A4               	addwf	putc@j,f
  2557  0392  3010               	movlw	16
  2558  0393  0224               	subwf	putc@j,w
  2559  0394  1C03               	skipc
  2560  0395  2B8C               	goto	l67
  2561  0396                     l1347:	
  2562  0396  3001               	movlw	1
  2563  0397  00A0               	movwf	??_putc
  2564  0398  0820               	movf	??_putc,w
  2565  0399  07A3               	addwf	putc@i,f
  2566  039A  3008               	movlw	8
  2567  039B  0223               	subwf	putc@i,w
  2568  039C  1C03               	skipc
  2569  039D  2B77               	goto	l1335
  2570  039E                     l66:	
  2571                           
  2572                           ;soft_uart_8_9600.c: 110: }
  2573                           ;soft_uart_8_9600.c: 111: }
  2574                           ;soft_uart_8_9600.c: 113: PORTAbits.RA1 = 1;
  2575  039E  1485               	bsf	5,1	;volatile
  2576                           
  2577                           ;soft_uart_8_9600.c: 116: for(j=0; j<18; j++) {
  2578  039F  01A4               	clrf	putc@j
  2579  03A0                     L2:	
  2580  03A0  3012               	movlw	18
  2581  03A1  0224               	subwf	putc@j,w
  2582  03A2  1803               	btfsc	3,0
  2583  03A3  0008               	return
  2584  03A4  0000               	nop	;# 
  2585  03A5  3001               	movlw	1
  2586  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  2587  03A7  00A0               	movwf	??_putc
  2588  03A8  0820               	movf	??_putc,w
  2589  03A9  07A4               	addwf	putc@j,f
  2590  03AA  2BA0               	goto	L2
  2591  03AB                     __end_of_putc:	
  2592                           
  2593                           	psect	text15
  2594  05D2                     __ptext15:	
  2595 ;; *************** function _initParams *****************
  2596 ;; Defined at:
  2597 ;;		line 31 in file "plant_watering_params.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;		None
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;  i               1   23[BANK0 ] unsigned char 
  2602 ;; Return value:  Size  Location     Type
  2603 ;;		None               void
  2604 ;; Registers used:
  2605 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMMON   BANK0   BANK1
  2611 ;;      Params:         0       0       0
  2612 ;;      Locals:         0       1       0
  2613 ;;      Temps:          0       1       0
  2614 ;;      Totals:         0       2       0
  2615 ;;Total ram usage:        2 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; Hardware stack levels required when called:    5
  2618 ;; This function calls:
  2619 ;;		_readParam
  2620 ;; This function is called by:
  2621 ;;		_showParams
  2622 ;;		_main
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           
  2627                           ;psect for function _initParams
  2628  05D2                     _initParams:	
  2629                           
  2630                           ;plant_watering_params.c: 32: for(uint8_t i=0; paramIds[i]!=0; i++)
  2631                           
  2632                           ;incstack = 0
  2633                           ; Regs used in _initParams: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2634  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  2635  05D3  01B7               	clrf	initParams@i
  2636  05D4                     l1527:	
  2637  05D4  0837               	movf	initParams@i,w
  2638  05D5  3E1D               	addlw	low ((_paramIds-__stringbase)| (0+32768))
  2639  05D6  0084               	movwf	4
  2640  05D7  2400               	fcall	stringdir
  2641  05D8  3A00               	xorlw	0
  2642  05D9  1903               	btfsc	3,2
  2643  05DA  0008               	return
  2644                           
  2645                           ;plant_watering_params.c: 33: ((int32_t*)(&params))[i] = readParam(paramIds[i]);
  2646  05DB  0837               	movf	initParams@i,w
  2647  05DC  3E1D               	addlw	low ((_paramIds-__stringbase)| (0+32768))
  2648  05DD  0084               	movwf	4
  2649  05DE  2400               	fcall	stringdir
  2650  05DF  250C               	fcall	_readParam
  2651  05E0  1283               	bcf	3,5	;RP0=0, select bank0
  2652  05E1  0837               	movf	initParams@i,w
  2653  05E2  00B6               	movwf	??_initParams
  2654  05E3  3001               	movlw	1
  2655  05E4                     u1585:	
  2656  05E4  1003               	clrc
  2657  05E5  0DB6               	rlf	??_initParams,f
  2658  05E6  3EFF               	addlw	-1
  2659  05E7  1D03               	skipz
  2660  05E8  2DE4               	goto	u1585
  2661  05E9  1003               	clrc
  2662  05EA  0D36               	rlf	??_initParams,w
  2663  05EB  3E4D               	addlw	(low (_params| 0))& (0+255)
  2664  05EC  0084               	movwf	4
  2665  05ED  082F               	movf	?_readParam,w
  2666  05EE  1383               	bcf	3,7	;select IRP bank0
  2667  05EF  0080               	movwf	0
  2668  05F0  0A84               	incf	4,f
  2669  05F1  0830               	movf	?_readParam+1,w
  2670  05F2  0080               	movwf	0
  2671  05F3  0A84               	incf	4,f
  2672  05F4  0831               	movf	?_readParam+2,w
  2673  05F5  0080               	movwf	0
  2674  05F6  0A84               	incf	4,f
  2675  05F7  0832               	movf	?_readParam+3,w
  2676  05F8  0080               	movwf	0
  2677  05F9  3001               	movlw	1
  2678  05FA  00B6               	movwf	??_initParams
  2679  05FB  0836               	movf	??_initParams,w
  2680  05FC  07B7               	addwf	initParams@i,f
  2681  05FD  2DD4               	goto	l1527
  2682  05FE                     __end_of_initParams:	
  2683                           
  2684                           	psect	text16
  2685  050C                     __ptext16:	
  2686 ;; *************** function _readParam *****************
  2687 ;; Defined at:
  2688 ;;		line 24 in file "plant_watering_params.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  id              1    wreg     unsigned char 
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;  id              1   20[BANK0 ] unsigned char 
  2693 ;;  i               1   21[BANK0 ] unsigned char 
  2694 ;; Return value:  Size  Location     Type
  2695 ;;                  4   15[BANK0 ] long 
  2696 ;; Registers used:
  2697 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMMON   BANK0   BANK1
  2703 ;;      Params:         0       4       0
  2704 ;;      Locals:         0       2       0
  2705 ;;      Temps:          0       1       0
  2706 ;;      Totals:         0       7       0
  2707 ;;Total ram usage:        7 bytes
  2708 ;; Hardware stack levels used:    1
  2709 ;; Hardware stack levels required when called:    4
  2710 ;; This function calls:
  2711 ;;		_eeRead32
  2712 ;; This function is called by:
  2713 ;;		_initParams
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717                           
  2718                           ;psect for function _readParam
  2719  050C                     _readParam:	
  2720                           
  2721                           ;incstack = 0
  2722                           ; Regs used in _readParam: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2723                           ;readParam@id stored from wreg
  2724  050C  1283               	bcf	3,5	;RP0=0, select bank0
  2725  050D  00B4               	movwf	readParam@id
  2726                           
  2727                           ;plant_watering_params.c: 25: for(uint8_t i=0; paramIds[i]!=0; i++)
  2728  050E  01B5               	clrf	readParam@i
  2729  050F                     l1385:	
  2730  050F  0835               	movf	readParam@i,w
  2731  0510  3E1D               	addlw	low ((_paramIds-__stringbase)| (0+32768))
  2732  0511  0084               	movwf	4
  2733  0512  2400               	fcall	stringdir
  2734  0513  3A00               	xorlw	0
  2735  0514  1903               	btfsc	3,2
  2736  0515  2D37               	goto	l1387
  2737                           
  2738                           ;plant_watering_params.c: 26: if(id==paramIds[i])
  2739  0516  0835               	movf	readParam@i,w
  2740  0517  3E1D               	addlw	low ((_paramIds-__stringbase)| (0+32768))
  2741  0518  0084               	movwf	4
  2742  0519  2400               	fcall	stringdir
  2743  051A  0634               	xorwf	readParam@id,w
  2744  051B  1D03               	skipz
  2745  051C  2D32               	goto	l1383
  2746                           
  2747                           ;plant_watering_params.c: 27: return eeRead32(i*4);
  2748  051D  0835               	movf	readParam@i,w
  2749  051E  00B3               	movwf	??_readParam
  2750  051F  3001               	movlw	1
  2751  0520                     u1245:	
  2752  0520  1003               	clrc
  2753  0521  0DB3               	rlf	??_readParam,f
  2754  0522  3EFF               	addlw	-1
  2755  0523  1D03               	skipz
  2756  0524  2D20               	goto	u1245
  2757  0525  1003               	clrc
  2758  0526  0D33               	rlf	??_readParam,w
  2759  0527  2306               	fcall	_eeRead32
  2760  0528  1283               	bcf	3,5	;RP0=0, select bank0
  2761  0529  0824               	movf	?_eeRead32+3,w
  2762  052A  00B2               	movwf	?_readParam+3
  2763  052B  0823               	movf	?_eeRead32+2,w
  2764  052C  00B1               	movwf	?_readParam+2
  2765  052D  0822               	movf	?_eeRead32+1,w
  2766  052E  00B0               	movwf	?_readParam+1
  2767  052F  0821               	movf	?_eeRead32,w
  2768  0530  00AF               	movwf	?_readParam
  2769  0531  0008               	return
  2770  0532                     l1383:	
  2771  0532  3001               	movlw	1
  2772  0533  00B3               	movwf	??_readParam
  2773  0534  0833               	movf	??_readParam,w
  2774  0535  07B5               	addwf	readParam@i,f
  2775  0536  2D0F               	goto	l1385
  2776  0537                     l1387:	
  2777                           
  2778                           ;plant_watering_params.c: 28: return 0;
  2779  0537  3000               	movlw	0
  2780  0538  00B2               	movwf	?_readParam+3
  2781  0539  3000               	movlw	0
  2782  053A  00B1               	movwf	?_readParam+2
  2783  053B  3000               	movlw	0
  2784  053C  00B0               	movwf	?_readParam+1
  2785  053D  3000               	movlw	0
  2786  053E  00AF               	movwf	?_readParam
  2787  053F  0008               	return
  2788  0540                     __end_of_readParam:	
  2789                           
  2790                           	psect	text17
  2791  0306                     __ptext17:	
  2792 ;; *************** function _eeRead32 *****************
  2793 ;; Defined at:
  2794 ;;		line 64 in file "eeprom.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  addr            1    wreg     unsigned char 
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;  addr            1    9[BANK0 ] unsigned char 
  2799 ;;  res             4   10[BANK0 ] long 
  2800 ;;  i               1   14[BANK0 ] unsigned char 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  4    1[BANK0 ] long 
  2803 ;; Registers used:
  2804 ;;		wreg, status,2, status,0, pclath, cstack
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMMON   BANK0   BANK1
  2810 ;;      Params:         0       4       0
  2811 ;;      Locals:         0       6       0
  2812 ;;      Temps:          0       4       0
  2813 ;;      Totals:         0      14       0
  2814 ;;Total ram usage:       14 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    3
  2817 ;; This function calls:
  2818 ;;		_eeRead8
  2819 ;; This function is called by:
  2820 ;;		_readParam
  2821 ;; This function uses a non-reentrant model
  2822 ;;
  2823                           
  2824                           
  2825                           ;psect for function _eeRead32
  2826  0306                     _eeRead32:	
  2827                           
  2828                           ;incstack = 0
  2829                           ; Regs used in _eeRead32: [wreg+status,2+status,0+pclath+cstack]
  2830                           ;eeRead32@addr stored from wreg
  2831  0306  1283               	bcf	3,5	;RP0=0, select bank0
  2832  0307  00A9               	movwf	eeRead32@addr
  2833                           
  2834                           ;eeprom.c: 65: int32_t res=0;
  2835  0308  3000               	movlw	0
  2836  0309  00AD               	movwf	eeRead32@res+3
  2837  030A  3000               	movlw	0
  2838  030B  00AC               	movwf	eeRead32@res+2
  2839  030C  3000               	movlw	0
  2840  030D  00AB               	movwf	eeRead32@res+1
  2841  030E  3000               	movlw	0
  2842  030F  00AA               	movwf	eeRead32@res
  2843                           
  2844                           ;eeprom.c: 66: uint8_t i;
  2845                           ;eeprom.c: 67: for(i=0; i<4; i++) {
  2846  0310  01AE               	clrf	eeRead32@i
  2847  0311  3004               	movlw	4
  2848  0312  022E               	subwf	eeRead32@i,w
  2849  0313  1803               	btfsc	3,0
  2850  0314  2B52               	goto	l1313
  2851  0315                     l1305:	
  2852                           
  2853                           ;eeprom.c: 68: res = res << 8;
  2854  0315  082A               	movf	eeRead32@res,w
  2855  0316  00A5               	movwf	??_eeRead32
  2856  0317  082B               	movf	eeRead32@res+1,w
  2857  0318  00A6               	movwf	??_eeRead32+1
  2858  0319  082C               	movf	eeRead32@res+2,w
  2859  031A  00A7               	movwf	??_eeRead32+2
  2860  031B  082D               	movf	eeRead32@res+3,w
  2861  031C  00A8               	movwf	??_eeRead32+3
  2862  031D  3008               	movlw	8
  2863  031E                     u1095:	
  2864  031E  1003               	clrc
  2865  031F  0DA5               	rlf	??_eeRead32,f
  2866  0320  0DA6               	rlf	??_eeRead32+1,f
  2867  0321  0DA7               	rlf	??_eeRead32+2,f
  2868  0322  0DA8               	rlf	??_eeRead32+3,f
  2869  0323  3EFF               	addlw	-1
  2870  0324  1D03               	skipz
  2871  0325  2B1E               	goto	u1095
  2872  0326  0828               	movf	??_eeRead32+3,w
  2873  0327  00AD               	movwf	eeRead32@res+3
  2874  0328  0827               	movf	??_eeRead32+2,w
  2875  0329  00AC               	movwf	eeRead32@res+2
  2876  032A  0826               	movf	??_eeRead32+1,w
  2877  032B  00AB               	movwf	eeRead32@res+1
  2878  032C  0825               	movf	??_eeRead32,w
  2879  032D  00AA               	movwf	eeRead32@res
  2880                           
  2881                           ;eeprom.c: 69: res += eeRead8(addr+i);
  2882  032E  082E               	movf	eeRead32@i,w
  2883  032F  0729               	addwf	eeRead32@addr,w
  2884  0330  26A4               	fcall	_eeRead8
  2885  0331  1283               	bcf	3,5	;RP0=0, select bank0
  2886  0332  00A5               	movwf	??_eeRead32
  2887  0333  01A6               	clrf	??_eeRead32+1
  2888  0334  01A7               	clrf	??_eeRead32+2
  2889  0335  01A8               	clrf	??_eeRead32+3
  2890  0336  0825               	movf	??_eeRead32,w
  2891  0337  07AA               	addwf	eeRead32@res,f
  2892  0338  0826               	movf	??_eeRead32+1,w
  2893  0339  1103               	clrz
  2894  033A  1803               	skipnc
  2895  033B  3E01               	addlw	1
  2896  033C  1D03               	btfss	3,2
  2897  033D  07AB               	addwf	eeRead32@res+1,f
  2898  033E  0827               	movf	??_eeRead32+2,w
  2899  033F  1103               	clrz
  2900  0340  1803               	skipnc
  2901  0341  3E01               	addlw	1
  2902  0342  1D03               	btfss	3,2
  2903  0343  07AC               	addwf	eeRead32@res+2,f
  2904  0344  0828               	movf	??_eeRead32+3,w
  2905  0345  1103               	clrz
  2906  0346  1803               	skipnc
  2907  0347  3E01               	addlw	1
  2908  0348  1D03               	btfss	3,2
  2909  0349  07AD               	addwf	eeRead32@res+3,f
  2910  034A  3001               	movlw	1
  2911  034B  00A5               	movwf	??_eeRead32
  2912  034C  0825               	movf	??_eeRead32,w
  2913  034D  07AE               	addwf	eeRead32@i,f
  2914  034E  3004               	movlw	4
  2915  034F  022E               	subwf	eeRead32@i,w
  2916  0350  1C03               	skipc
  2917  0351  2B15               	goto	l1305
  2918  0352                     l1313:	
  2919                           
  2920                           ;eeprom.c: 70: }
  2921                           ;eeprom.c: 80: return res;
  2922  0352  082D               	movf	eeRead32@res+3,w
  2923  0353  00A4               	movwf	?_eeRead32+3
  2924  0354  082C               	movf	eeRead32@res+2,w
  2925  0355  00A3               	movwf	?_eeRead32+2
  2926  0356  082B               	movf	eeRead32@res+1,w
  2927  0357  00A2               	movwf	?_eeRead32+1
  2928  0358  082A               	movf	eeRead32@res,w
  2929  0359  00A1               	movwf	?_eeRead32
  2930  035A  0008               	return
  2931  035B                     __end_of_eeRead32:	
  2932                           
  2933                           	psect	text18
  2934  06A4                     __ptext18:	
  2935 ;; *************** function _eeRead8 *****************
  2936 ;; Defined at:
  2937 ;;		line 20 in file "eeprom.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;  addr            1    wreg     unsigned char 
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;  addr            1    0[BANK0 ] unsigned char 
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      unsigned char 
  2944 ;; Registers used:
  2945 ;;		wreg
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMMON   BANK0   BANK1
  2951 ;;      Params:         0       0       0
  2952 ;;      Locals:         0       1       0
  2953 ;;      Temps:          0       0       0
  2954 ;;      Totals:         0       1       0
  2955 ;;Total ram usage:        1 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; Hardware stack levels required when called:    2
  2958 ;; This function calls:
  2959 ;;		Nothing
  2960 ;; This function is called by:
  2961 ;;		_eeRead32
  2962 ;;		_eeRead16
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           
  2967                           ;psect for function _eeRead8
  2968  06A4                     _eeRead8:	
  2969                           
  2970                           ;incstack = 0
  2971                           ; Regs used in _eeRead8: [wreg]
  2972                           ;eeRead8@addr stored from wreg
  2973  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  2974  06A5  00A0               	movwf	eeRead8@addr
  2975                           
  2976                           ;eeprom.c: 21: EEADR = addr;
  2977  06A6  0820               	movf	eeRead8@addr,w
  2978  06A7  1683               	bsf	3,5	;RP0=1, select bank1
  2979  06A8  009B               	movwf	27	;volatile
  2980                           
  2981                           ;eeprom.c: 24: EECON1bits.RD = 1;
  2982  06A9  141C               	bsf	28,0	;volsfr
  2983                           
  2984                           ;eeprom.c: 25: return EEDATA;
  2985  06AA  081A               	movf	26,w	;volatile
  2986  06AB  0008               	return
  2987  06AC                     __end_of_eeRead8:	
  2988                           
  2989                           	psect	text19
  2990  06AF                     __ptext19:	
  2991 ;; *************** function _openValve *****************
  2992 ;; Defined at:
  2993 ;;		line 81 in file "main.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;		None
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;		None
  2998 ;; Return value:  Size  Location     Type
  2999 ;;		None               void
  3000 ;; Registers used:
  3001 ;;		None
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMMON   BANK0   BANK1
  3007 ;;      Params:         0       0       0
  3008 ;;      Locals:         0       0       0
  3009 ;;      Temps:          0       0       0
  3010 ;;      Totals:         0       0       0
  3011 ;;Total ram usage:        0 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    2
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		_exeCmd
  3018 ;;		_main
  3019 ;; This function uses a non-reentrant model
  3020 ;;
  3021                           
  3022                           
  3023                           ;psect for function _openValve
  3024  06AF                     _openValve:	
  3025                           
  3026                           ;main.c: 82: PORTCbits.RC2 = 1;
  3027                           
  3028                           ;incstack = 0
  3029                           ; Regs used in _openValve: []
  3030  06AF  1283               	bcf	3,5	;RP0=0, select bank0
  3031  06B0  1507               	bsf	7,2	;volatile
  3032  06B1  0008               	return
  3033  06B2                     __end_of_openValve:	
  3034                           
  3035                           	psect	text20
  3036  0629                     __ptext20:	
  3037 ;; *************** function _cmdStartsWith *****************
  3038 ;; Defined at:
  3039 ;;		line 99 in file "main.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;  st              1    wreg     PTR unsigned char 
  3042 ;;		 -> STR_7(5), STR_6(6), STR_5(5), STR_3(4), 
  3043 ;;		 -> STR_2(4), 
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;  st              1    1[BANK0 ] PTR unsigned char 
  3046 ;;		 -> STR_7(5), STR_6(6), STR_5(5), STR_3(4), 
  3047 ;;		 -> STR_2(4), 
  3048 ;;  i               1    2[BANK0 ] unsigned char 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;                  1    wreg      unsigned char 
  3051 ;; Registers used:
  3052 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMMON   BANK0   BANK1
  3058 ;;      Params:         0       0       0
  3059 ;;      Locals:         0       2       0
  3060 ;;      Temps:          0       1       0
  3061 ;;      Totals:         0       3       0
  3062 ;;Total ram usage:        3 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:    2
  3065 ;; This function calls:
  3066 ;;		Nothing
  3067 ;; This function is called by:
  3068 ;;		_exeCmd
  3069 ;; This function uses a non-reentrant model
  3070 ;;
  3071                           
  3072                           
  3073                           ;psect for function _cmdStartsWith
  3074  0629                     _cmdStartsWith:	
  3075                           
  3076                           ;incstack = 0
  3077                           ; Regs used in _cmdStartsWith: [wreg-fsr0h+status,2+status,0+pclath]
  3078                           ;cmdStartsWith@st stored from wreg
  3079  0629  1283               	bcf	3,5	;RP0=0, select bank0
  3080  062A  00A1               	movwf	cmdStartsWith@st
  3081                           
  3082                           ;main.c: 100: for(uint8_t i=0; ; i++) {
  3083  062B  01A2               	clrf	cmdStartsWith@i
  3084  062C                     l1585:	
  3085                           
  3086                           ;main.c: 101: if(st[i]==0) return 1;
  3087  062C  0822               	movf	cmdStartsWith@i,w
  3088  062D  0721               	addwf	cmdStartsWith@st,w
  3089  062E  0084               	movwf	4
  3090  062F  2400               	fcall	stringdir
  3091  0630  3A00               	xorlw	0
  3092  0631  1D03               	skipz
  3093  0632  2E35               	goto	l1591
  3094  0633  3001               	movlw	1
  3095  0634  0008               	return
  3096  0635                     l1591:	
  3097                           
  3098                           ;main.c: 102: if(cmd[i]==0) return 0;
  3099  0635  0822               	movf	cmdStartsWith@i,w
  3100  0636  3EA0               	addlw	(low (_cmd| 0))& (0+255)
  3101  0637  0084               	movwf	4
  3102  0638  1383               	bcf	3,7	;select IRP bank1
  3103  0639  0800               	movf	0,w
  3104  063A  1D03               	btfss	3,2
  3105  063B  2E3E               	goto	l1597
  3106  063C  3000               	movlw	0
  3107  063D  0008               	return
  3108  063E                     l1597:	
  3109                           
  3110                           ;main.c: 103: if(cmd[i]!=st[i]) return 0;
  3111  063E  0822               	movf	cmdStartsWith@i,w
  3112  063F  0721               	addwf	cmdStartsWith@st,w
  3113  0640  0084               	movwf	4
  3114  0641  2400               	fcall	stringdir
  3115  0642  00A0               	movwf	??_cmdStartsWith
  3116  0643  0822               	movf	cmdStartsWith@i,w
  3117  0644  3EA0               	addlw	(low (_cmd| 0))& (0+255)
  3118  0645  0084               	movwf	4
  3119  0646  0800               	movf	0,w
  3120  0647  0620               	xorwf	??_cmdStartsWith,w
  3121  0648  1903               	skipnz
  3122  0649  2E4C               	goto	l1603
  3123  064A  3000               	movlw	0
  3124  064B  0008               	return
  3125  064C                     l1603:	
  3126  064C  3001               	movlw	1
  3127  064D  00A0               	movwf	??_cmdStartsWith
  3128  064E  0820               	movf	??_cmdStartsWith,w
  3129  064F  07A2               	addwf	cmdStartsWith@i,f
  3130  0650  2E2C               	goto	l1585
  3131  0651                     __end_of_cmdStartsWith:	
  3132                           
  3133                           	psect	text21
  3134  06B2                     __ptext21:	
  3135 ;; *************** function _closeValve *****************
  3136 ;; Defined at:
  3137 ;;		line 86 in file "main.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;		None
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;		None
  3142 ;; Return value:  Size  Location     Type
  3143 ;;		None               void
  3144 ;; Registers used:
  3145 ;;		None
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMMON   BANK0   BANK1
  3151 ;;      Params:         0       0       0
  3152 ;;      Locals:         0       0       0
  3153 ;;      Temps:          0       0       0
  3154 ;;      Totals:         0       0       0
  3155 ;;Total ram usage:        0 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    2
  3158 ;; This function calls:
  3159 ;;		Nothing
  3160 ;; This function is called by:
  3161 ;;		_exeCmd
  3162 ;;		_main
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           
  3167                           ;psect for function _closeValve
  3168  06B2                     _closeValve:	
  3169                           
  3170                           ;main.c: 87: PORTCbits.RC2 = 0;
  3171                           
  3172                           ;incstack = 0
  3173                           ; Regs used in _closeValve: []
  3174  06B2  1283               	bcf	3,5	;RP0=0, select bank0
  3175  06B3  1107               	bcf	7,2	;volatile
  3176  06B4  0008               	return
  3177  06B5                     __end_of_closeValve:	
  3178                           
  3179                           	psect	text22
  3180  00AC                     __ptext22:	
  3181 ;; *************** function _atol *****************
  3182 ;; Defined at:
  3183 ;;		line 5 in file "/opt/microchip/xc8/v1.34/sources/common/atol.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;  s               1    wreg     PTR const unsigned char 
  3186 ;;		 -> cmd(32), 
  3187 ;; Auto vars:     Size  Location     Type
  3188 ;;  s               1   26[BANK0 ] PTR const unsigned char 
  3189 ;;		 -> cmd(32), 
  3190 ;;  a               4   22[BANK0 ] long 
  3191 ;;  c               1   27[BANK0 ] unsigned char 
  3192 ;;  sign            1   21[BANK0 ] unsigned char 
  3193 ;; Return value:  Size  Location     Type
  3194 ;;                  4   13[BANK0 ] long 
  3195 ;; Registers used:
  3196 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMMON   BANK0   BANK1
  3202 ;;      Params:         0       4       0
  3203 ;;      Locals:         0       7       0
  3204 ;;      Temps:          0       4       0
  3205 ;;      Totals:         0      15       0
  3206 ;;Total ram usage:       15 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:    3
  3209 ;; This function calls:
  3210 ;;		___lmul
  3211 ;;		_isdigit
  3212 ;; This function is called by:
  3213 ;;		_exeCmd
  3214 ;; This function uses a non-reentrant model
  3215 ;;
  3216                           
  3217                           
  3218                           ;psect for function _atol
  3219  00AC                     _atol:	
  3220                           
  3221                           ;incstack = 0
  3222                           ; Regs used in _atol: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3223                           ;atol@s stored from wreg
  3224  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  3225  00AD  00BA               	movwf	atol@s
  3226  00AE                     l418:	
  3227  00AE  083A               	movf	atol@s,w
  3228  00AF  0084               	movwf	4
  3229  00B0  1383               	bcf	3,7	;select IRP bank0
  3230  00B1  0800               	movf	0,w
  3231  00B2  00B1               	movwf	??_atol
  3232  00B3  0831               	movf	??_atol,w
  3233  00B4  00BB               	movwf	atol@c
  3234  00B5  3001               	movlw	1
  3235  00B6  00B1               	movwf	??_atol
  3236  00B7  0831               	movf	??_atol,w
  3237  00B8  07BA               	addwf	atol@s,f
  3238  00B9  3020               	movlw	32
  3239  00BA  063B               	xorwf	atol@c,w
  3240  00BB  1903               	btfsc	3,2
  3241  00BC  28AE               	goto	l418
  3242  00BD  3009               	movlw	9
  3243  00BE  063B               	xorwf	atol@c,w
  3244  00BF  1903               	btfsc	3,2
  3245  00C0  28AE               	goto	l418
  3246  00C1  3000               	movlw	0
  3247  00C2  00B9               	movwf	atol@a+3
  3248  00C3  3000               	movlw	0
  3249  00C4  00B8               	movwf	atol@a+2
  3250  00C5  3000               	movlw	0
  3251  00C6  00B7               	movwf	atol@a+1
  3252  00C7  3000               	movlw	0
  3253  00C8  00B6               	movwf	atol@a
  3254  00C9  01B5               	clrf	atol@sign
  3255  00CA  302D               	movlw	45
  3256  00CB  063B               	xorwf	atol@c,w
  3257  00CC  1D03               	btfss	3,2
  3258  00CD  28D3               	goto	l1625
  3259  00CE  3001               	movlw	1
  3260  00CF  00B1               	movwf	??_atol
  3261  00D0  0831               	movf	??_atol,w
  3262  00D1  07B5               	addwf	atol@sign,f
  3263  00D2  28D7               	goto	L3
  3264  00D3                     l1625:	
  3265  00D3  302B               	movlw	43
  3266  00D4  063B               	xorwf	atol@c,w
  3267  00D5  1D03               	btfss	3,2
  3268  00D6  28E1               	goto	l1637
  3269  00D7                     L3:	
  3270  00D7  083A               	movf	atol@s,w
  3271  00D8  0084               	movwf	4
  3272  00D9                     L4:	
  3273  00D9  0800               	movf	0,w
  3274  00DA  00B1               	movwf	??_atol
  3275  00DB  0831               	movf	??_atol,w
  3276  00DC  00BB               	movwf	atol@c
  3277  00DD  3001               	movlw	1
  3278  00DE  00B1               	movwf	??_atol
  3279  00DF  0831               	movf	??_atol,w
  3280  00E0  07BA               	addwf	atol@s,f
  3281  00E1                     l1637:	
  3282  00E1  083B               	movf	atol@c,w
  3283  00E2  268D               	fcall	_isdigit
  3284  00E3  1C03               	btfss	3,0
  3285  00E4  291C               	goto	l1639
  3286  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  3287  00E6  083B               	movf	atol@c,w
  3288  00E7  3ED0               	addlw	208
  3289  00E8  00B1               	movwf	??_atol
  3290  00E9  01B2               	clrf	??_atol+1
  3291  00EA  01B3               	clrf	??_atol+2
  3292  00EB  01B4               	clrf	??_atol+3
  3293  00EC  0839               	movf	atol@a+3,w
  3294  00ED  00A3               	movwf	___lmul@multiplier+3
  3295  00EE  0838               	movf	atol@a+2,w
  3296  00EF  00A2               	movwf	___lmul@multiplier+2
  3297  00F0  0837               	movf	atol@a+1,w
  3298  00F1  00A1               	movwf	___lmul@multiplier+1
  3299  00F2  0836               	movf	atol@a,w
  3300  00F3  00A0               	movwf	___lmul@multiplier
  3301  00F4  3000               	movlw	0
  3302  00F5  00A7               	movwf	___lmul@multiplicand+3
  3303  00F6  3000               	movlw	0
  3304  00F7  00A6               	movwf	___lmul@multiplicand+2
  3305  00F8  3000               	movlw	0
  3306  00F9  00A5               	movwf	___lmul@multiplicand+1
  3307  00FA  300A               	movlw	10
  3308  00FB  00A4               	movwf	___lmul@multiplicand
  3309  00FC  2493               	fcall	___lmul
  3310  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  3311  00FE  0820               	movf	?___lmul,w
  3312  00FF  07B1               	addwf	??_atol,f
  3313  0100  0821               	movf	?___lmul+1,w
  3314  0101  1803               	skipnc
  3315  0102  0F21               	incfsz	?___lmul+1,w
  3316  0103  2905               	goto	u1790
  3317  0104  2906               	goto	u1791
  3318  0105                     u1790:	
  3319  0105  07B2               	addwf	??_atol+1,f
  3320  0106                     u1791:	
  3321  0106  0822               	movf	?___lmul+2,w
  3322  0107  1803               	skipnc
  3323  0108  0F22               	incfsz	?___lmul+2,w
  3324  0109  290B               	goto	u1792
  3325  010A  290C               	goto	u1793
  3326  010B                     u1792:	
  3327  010B  07B3               	addwf	??_atol+2,f
  3328  010C                     u1793:	
  3329  010C  0823               	movf	?___lmul+3,w
  3330  010D  1803               	skipnc
  3331  010E  0A23               	incf	?___lmul+3,w
  3332  010F  07B4               	addwf	??_atol+3,f
  3333  0110  0834               	movf	??_atol+3,w
  3334  0111  00B9               	movwf	atol@a+3
  3335  0112  0833               	movf	??_atol+2,w
  3336  0113  00B8               	movwf	atol@a+2
  3337  0114  0832               	movf	??_atol+1,w
  3338  0115  00B7               	movwf	atol@a+1
  3339  0116  0831               	movf	??_atol,w
  3340  0117  00B6               	movwf	atol@a
  3341  0118  083A               	movf	atol@s,w
  3342  0119  0084               	movwf	4
  3343  011A  1383               	bcf	3,7	;select IRP bank0
  3344  011B  28D9               	goto	L4
  3345  011C                     l1639:	
  3346  011C  1283               	bcf	3,5	;RP0=0, select bank0
  3347  011D  0835               	movf	atol@sign,w
  3348  011E  1903               	btfsc	3,2
  3349  011F  2930               	goto	l1645
  3350  0120  0936               	comf	atol@a,w
  3351  0121  00AD               	movwf	?_atol
  3352  0122  0937               	comf	atol@a+1,w
  3353  0123  00AE               	movwf	?_atol+1
  3354  0124  0938               	comf	atol@a+2,w
  3355  0125  00AF               	movwf	?_atol+2
  3356  0126  0939               	comf	atol@a+3,w
  3357  0127  00B0               	movwf	?_atol+3
  3358  0128  0AAD               	incf	?_atol,f
  3359  0129  1903               	skipnz
  3360  012A  0AAE               	incf	?_atol+1,f
  3361  012B  1903               	skipnz
  3362  012C  0AAF               	incf	?_atol+2,f
  3363  012D  1903               	skipnz
  3364  012E  0AB0               	incf	?_atol+3,f
  3365  012F  0008               	return
  3366  0130                     l1645:	
  3367  0130  0839               	movf	atol@a+3,w
  3368  0131  00B0               	movwf	?_atol+3
  3369  0132  0838               	movf	atol@a+2,w
  3370  0133  00AF               	movwf	?_atol+2
  3371  0134  0837               	movf	atol@a+1,w
  3372  0135  00AE               	movwf	?_atol+1
  3373  0136  0836               	movf	atol@a,w
  3374  0137  00AD               	movwf	?_atol
  3375  0138  0008               	return
  3376  0139                     __end_of_atol:	
  3377                           
  3378                           	psect	text23
  3379  068D                     __ptext23:	
  3380 ;; *************** function _isdigit *****************
  3381 ;; Defined at:
  3382 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/isdigit.c"
  3383 ;; Parameters:    Size  Location     Type
  3384 ;;  c               1    wreg     unsigned char 
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;  c               1    1[BANK0 ] unsigned char 
  3387 ;; Return value:  Size  Location     Type
  3388 ;;		None               void
  3389 ;; Registers used:
  3390 ;;		wreg, status,2, status,0
  3391 ;; Tracked objects:
  3392 ;;		On entry : 0/0
  3393 ;;		On exit  : 0/0
  3394 ;;		Unchanged: 0/0
  3395 ;; Data sizes:     COMMON   BANK0   BANK1
  3396 ;;      Params:         0       0       0
  3397 ;;      Locals:         0       2       0
  3398 ;;      Temps:          0       0       0
  3399 ;;      Totals:         0       2       0
  3400 ;;Total ram usage:        2 bytes
  3401 ;; Hardware stack levels used:    1
  3402 ;; Hardware stack levels required when called:    2
  3403 ;; This function calls:
  3404 ;;		Nothing
  3405 ;; This function is called by:
  3406 ;;		_atol
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           
  3411                           ;psect for function _isdigit
  3412  068D                     _isdigit:	
  3413                           
  3414                           ;incstack = 0
  3415                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3416                           ;isdigit@c stored from wreg
  3417  068D  1283               	bcf	3,5	;RP0=0, select bank0
  3418  068E  00A1               	movwf	isdigit@c
  3419  068F  01A0               	clrf	_isdigit$582
  3420  0690  303A               	movlw	58
  3421  0691  0221               	subwf	isdigit@c,w
  3422  0692  1803               	skipnc
  3423  0693  2E9A               	goto	l1551
  3424  0694  3030               	movlw	48
  3425  0695  0221               	subwf	isdigit@c,w
  3426  0696  1C03               	skipc
  3427  0697  2E9A               	goto	l1551
  3428  0698  01A0               	clrf	_isdigit$582
  3429  0699  0AA0               	incf	_isdigit$582,f
  3430  069A                     l1551:	
  3431  069A  0C20               	rrf	_isdigit$582,w
  3432  069B  0008               	return
  3433  069C                     __end_of_isdigit:	
  3434                           
  3435                           	psect	text24
  3436  0493                     __ptext24:	
  3437 ;; *************** function ___lmul *****************
  3438 ;; Defined at:
  3439 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/Umul32.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3442 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;  product         4    9[BANK0 ] unsigned long 
  3445 ;; Return value:  Size  Location     Type
  3446 ;;                  4    0[BANK0 ] unsigned long 
  3447 ;; Registers used:
  3448 ;;		wreg, status,2, status,0
  3449 ;; Tracked objects:
  3450 ;;		On entry : 0/0
  3451 ;;		On exit  : 0/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMMON   BANK0   BANK1
  3454 ;;      Params:         0       8       0
  3455 ;;      Locals:         0       4       0
  3456 ;;      Temps:          0       1       0
  3457 ;;      Totals:         0      13       0
  3458 ;;Total ram usage:       13 bytes
  3459 ;; Hardware stack levels used:    1
  3460 ;; Hardware stack levels required when called:    2
  3461 ;; This function calls:
  3462 ;;		Nothing
  3463 ;; This function is called by:
  3464 ;;		_atol
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           
  3469                           ;psect for function ___lmul
  3470  0493                     ___lmul:	
  3471                           
  3472                           ;incstack = 0
  3473                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3474  0493  3000               	movlw	0
  3475  0494  1283               	bcf	3,5	;RP0=0, select bank0
  3476  0495  00AC               	movwf	___lmul@product+3
  3477  0496  3000               	movlw	0
  3478  0497  00AB               	movwf	___lmul@product+2
  3479  0498  3000               	movlw	0
  3480  0499  00AA               	movwf	___lmul@product+1
  3481  049A  3000               	movlw	0
  3482  049B  00A9               	movwf	___lmul@product
  3483  049C                     l1531:	
  3484  049C  1C20               	btfss	___lmul@multiplier,0
  3485  049D  2CB2               	goto	l1535
  3486  049E  0824               	movf	___lmul@multiplicand,w
  3487  049F  07A9               	addwf	___lmul@product,f
  3488  04A0  0825               	movf	___lmul@multiplicand+1,w
  3489  04A1  1103               	clrz
  3490  04A2  1803               	skipnc
  3491  04A3  3E01               	addlw	1
  3492  04A4  1D03               	btfss	3,2
  3493  04A5  07AA               	addwf	___lmul@product+1,f
  3494  04A6  0826               	movf	___lmul@multiplicand+2,w
  3495  04A7  1103               	clrz
  3496  04A8  1803               	skipnc
  3497  04A9  3E01               	addlw	1
  3498  04AA  1D03               	btfss	3,2
  3499  04AB  07AB               	addwf	___lmul@product+2,f
  3500  04AC  0827               	movf	___lmul@multiplicand+3,w
  3501  04AD  1103               	clrz
  3502  04AE  1803               	skipnc
  3503  04AF  3E01               	addlw	1
  3504  04B0  1D03               	btfss	3,2
  3505  04B1  07AC               	addwf	___lmul@product+3,f
  3506  04B2                     l1535:	
  3507  04B2  3001               	movlw	1
  3508  04B3  00A8               	movwf	??___lmul
  3509  04B4                     u1625:	
  3510  04B4  1003               	clrc
  3511  04B5  0DA4               	rlf	___lmul@multiplicand,f
  3512  04B6  0DA5               	rlf	___lmul@multiplicand+1,f
  3513  04B7  0DA6               	rlf	___lmul@multiplicand+2,f
  3514  04B8  0DA7               	rlf	___lmul@multiplicand+3,f
  3515  04B9  0BA8               	decfsz	??___lmul,f
  3516  04BA  2CB4               	goto	u1625
  3517  04BB  3001               	movlw	1
  3518  04BC                     u1635:	
  3519  04BC  1003               	clrc
  3520  04BD  0CA3               	rrf	___lmul@multiplier+3,f
  3521  04BE  0CA2               	rrf	___lmul@multiplier+2,f
  3522  04BF  0CA1               	rrf	___lmul@multiplier+1,f
  3523  04C0  0CA0               	rrf	___lmul@multiplier,f
  3524  04C1  3EFF               	addlw	-1
  3525  04C2  1D03               	skipz
  3526  04C3  2CBC               	goto	u1635
  3527  04C4  0823               	movf	___lmul@multiplier+3,w
  3528  04C5  0422               	iorwf	___lmul@multiplier+2,w
  3529  04C6  0421               	iorwf	___lmul@multiplier+1,w
  3530  04C7  0420               	iorwf	___lmul@multiplier,w
  3531  04C8  1D03               	skipz
  3532  04C9  2C9C               	goto	l1531
  3533  04CA  082C               	movf	___lmul@product+3,w
  3534  04CB  00A3               	movwf	?___lmul+3
  3535  04CC  082B               	movf	___lmul@product+2,w
  3536  04CD  00A2               	movwf	?___lmul+2
  3537  04CE  082A               	movf	___lmul@product+1,w
  3538  04CF  00A1               	movwf	?___lmul+1
  3539  04D0  0829               	movf	___lmul@product,w
  3540  04D1  00A0               	movwf	?___lmul
  3541  04D2  0008               	return
  3542  04D3                     __end_of___lmul:	
  3543                           
  3544                           	psect	text25
  3545  0572                     __ptext25:	
  3546 ;; *************** function _isr *****************
  3547 ;; Defined at:
  3548 ;;		line 267 in file "main.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;		None
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;		None
  3553 ;; Return value:  Size  Location     Type
  3554 ;;		None               void
  3555 ;; Registers used:
  3556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMMON   BANK0   BANK1
  3562 ;;      Params:         0       0       0
  3563 ;;      Locals:         0       0       0
  3564 ;;      Temps:          5       0       0
  3565 ;;      Totals:         5       0       0
  3566 ;;Total ram usage:        5 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:    1
  3569 ;; This function calls:
  3570 ;;		_getc
  3571 ;; This function is called by:
  3572 ;;		Interrupt level 1
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           
  3577                           ;psect for function _isr
  3578  0572                     _isr:	
  3579                           
  3580                           ;main.c: 271: c = getc();
  3581  0572  2139               	fcall	_getc
  3582  0573  00F8               	movwf	??_isr
  3583  0574  0878               	movf	??_isr,w
  3584  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3585  0576  00DA               	movwf	_c
  3586                           
  3587                           ;main.c: 273: if(c=='\n' || c=='\r') {
  3588  0577  300A               	movlw	10
  3589  0578  065A               	xorwf	_c,w
  3590  0579  1903               	btfsc	3,2
  3591  057A  2D7F               	goto	i1l1855
  3592  057B  300D               	movlw	13
  3593  057C  065A               	xorwf	_c,w
  3594  057D  1D03               	btfss	3,2
  3595  057E  2D87               	goto	i1l1859
  3596  057F                     i1l1855:	
  3597                           
  3598                           ;main.c: 274: cmd[cmdIndex] = 0;
  3599  057F  087D               	movf	_cmdIndex,w
  3600  0580  3EA0               	addlw	(low (_cmd| 0))& (0+255)
  3601  0581  0084               	movwf	4
  3602  0582  1383               	bcf	3,7	;select IRP bank1
  3603  0583  0180               	clrf	0
  3604                           
  3605                           ;main.c: 275: cmdReady = 1;
  3606  0584  01DB               	clrf	_cmdReady
  3607  0585  0ADB               	incf	_cmdReady,f
  3608                           
  3609                           ;main.c: 276: } else {
  3610  0586  2D97               	goto	i1l1865
  3611  0587                     i1l1859:	
  3612                           
  3613                           ;main.c: 277: cmd[cmdIndex] = c;
  3614  0587  085A               	movf	_c,w
  3615  0588  00F8               	movwf	??_isr
  3616  0589  087D               	movf	_cmdIndex,w
  3617  058A  3EA0               	addlw	(low (_cmd| 0))& (0+255)
  3618  058B  0084               	movwf	4
  3619  058C  0878               	movf	??_isr,w
  3620  058D  1383               	bcf	3,7	;select IRP bank1
  3621  058E  0080               	movwf	0
  3622                           
  3623                           ;main.c: 278: if(cmdIndex<31) cmdIndex++;
  3624  058F  301F               	movlw	31
  3625  0590  027D               	subwf	_cmdIndex,w
  3626  0591  1803               	skipnc
  3627  0592  2D97               	goto	i1l1865
  3628  0593  3001               	movlw	1
  3629  0594  00F8               	movwf	??_isr
  3630  0595  0878               	movf	??_isr,w
  3631  0596  07FD               	addwf	_cmdIndex,f
  3632  0597                     i1l1865:	
  3633                           
  3634                           ;main.c: 279: }
  3635                           ;main.c: 281: INTCONbits.RAIF = 0;
  3636  0597  100B               	bcf	11,0	;volatile
  3637  0598  087C               	movf	??_isr+4,w
  3638  0599  00FF               	movwf	127
  3639  059A  087B               	movf	??_isr+3,w
  3640  059B  008A               	movwf	10
  3641  059C  087A               	movf	??_isr+2,w
  3642  059D  0084               	movwf	4
  3643  059E  0E79               	swapf	(??_isr+1)^(0+-128),w
  3644  059F  0083               	movwf	3
  3645  05A0  0EFE               	swapf	126,f
  3646  05A1  0E7E               	swapf	126,w
  3647  05A2  0009               	retfie
  3648  05A3                     __end_of_isr:	
  3649                           
  3650                           	psect	intentry
  3651  0004                     __pintentry:	
  3652                           ;incstack = 0
  3653                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3654                           
  3655  0004                     interrupt_function:	
  3656  007E                     saved_w	set	btemp
  3657  0004  00FE               	movwf	btemp
  3658  0005  0E03               	swapf	3,w
  3659  0006  00F9               	movwf	??_isr+1
  3660  0007  0804               	movf	4,w
  3661  0008  00FA               	movwf	??_isr+2
  3662  0009  080A               	movf	10,w
  3663  000A  00FB               	movwf	??_isr+3
  3664  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3665  000C  087F               	movf	btemp+1,w
  3666  000D  00FC               	movwf	??_isr+4
  3667  000E  2D72               	ljmp	_isr
  3668                           
  3669                           	psect	text26
  3670  0139                     __ptext26:	
  3671 ;; *************** function _getc *****************
  3672 ;; Defined at:
  3673 ;;		line 16 in file "soft_uart_8_9600.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;		None
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;  wait            2    2[COMMON] unsigned int 
  3678 ;;  j               1    7[COMMON] unsigned char 
  3679 ;;  res             1    6[COMMON] unsigned char 
  3680 ;;  i               1    5[COMMON] unsigned char 
  3681 ;;  a               1    4[COMMON] unsigned char 
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  1    wreg      unsigned char 
  3684 ;; Registers used:
  3685 ;;		wreg, status,2, status,0
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/0
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMMON   BANK0   BANK1
  3691 ;;      Params:         0       0       0
  3692 ;;      Locals:         6       0       0
  3693 ;;      Temps:          2       0       0
  3694 ;;      Totals:         8       0       0
  3695 ;;Total ram usage:        8 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; This function calls:
  3698 ;;		Nothing
  3699 ;; This function is called by:
  3700 ;;		_isr
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           
  3705                           ;psect for function _getc
  3706  0139                     _getc:	
  3707                           
  3708                           ;soft_uart_8_9600.c: 17: uint8_t res, a, i, j;
  3709                           ;soft_uart_8_9600.c: 18: uint16_t wait;
  3710                           ;soft_uart_8_9600.c: 20: res = 0;
  3711                           
  3712                           ;incstack = 0
  3713                           ; Regs used in _getc: [wreg+status,2+status,0]
  3714  0139  01F6               	clrf	getc@res
  3715                           
  3716                           ;soft_uart_8_9600.c: 22: wait = 0;
  3717  013A  01F2               	clrf	getc@wait
  3718  013B  01F3               	clrf	getc@wait+1
  3719  013C                     i1l44:	
  3720                           ;soft_uart_8_9600.c: 24: while(PORTAbits.RA2==1) {}
  3721                           
  3722  013C  1283               	bcf	3,5	;RP0=0, select bank0
  3723  013D  1905               	btfsc	5,2	;volatile
  3724  013E  293C               	goto	i1l44
  3725                           
  3726                           ;soft_uart_8_9600.c: 31: for(j=0; j<19; j++) {
  3727  013F  01F7               	clrf	getc@j
  3728  0140  3013               	movlw	19
  3729  0141  0277               	subwf	getc@j,w
  3730  0142  1803               	btfsc	3,0
  3731  0143  294D               	goto	i1l48
  3732  0144                     i1l47:	
  3733  0144  0000               	nop	;# 
  3734  0145  3001               	movlw	1
  3735  0146  00F0               	movwf	??_getc
  3736  0147  0870               	movf	??_getc,w
  3737  0148  07F7               	addwf	getc@j,f
  3738  0149  3013               	movlw	19
  3739  014A  0277               	subwf	getc@j,w
  3740  014B  1C03               	skipc
  3741  014C  2944               	goto	i1l47
  3742  014D                     i1l48:	
  3743  014D  0000               	nop	;# 
  3744  014E  0000               	nop	;# 
  3745  014F  0000               	nop	;# 
  3746  0150  0000               	nop	;# 
  3747  0151  0000               	nop	;# 
  3748  0152  0000               	nop	;# 
  3749                           
  3750                           ;soft_uart_8_9600.c: 43: for(i=0; i<8; i++) {
  3751  0153  01F5               	clrf	getc@i
  3752  0154  3008               	movlw	8
  3753  0155  0275               	subwf	getc@i,w
  3754  0156  1803               	btfsc	3,0
  3755  0157  298C               	goto	i1l1693
  3756  0158                     i1l1667:	
  3757                           
  3758                           ;soft_uart_8_9600.c: 45: for(j=0; j<8; j++) {
  3759  0158  01F7               	clrf	getc@j
  3760  0159  3008               	movlw	8
  3761  015A  0277               	subwf	getc@j,w
  3762  015B  1803               	btfsc	3,0
  3763  015C  2966               	goto	i1l52
  3764  015D                     i1l51:	
  3765  015D  0000               	nop	;# 
  3766  015E  3001               	movlw	1
  3767  015F  00F0               	movwf	??_getc
  3768  0160  0870               	movf	??_getc,w
  3769  0161  07F7               	addwf	getc@j,f
  3770  0162  3008               	movlw	8
  3771  0163  0277               	subwf	getc@j,w
  3772  0164  1C03               	skipc
  3773  0165  295D               	goto	i1l51
  3774  0166                     i1l52:	
  3775  0166  0000               	nop	;# 
  3776  0167  0000               	nop	;# 
  3777                           
  3778                           ;soft_uart_8_9600.c: 51: res = res << 1;
  3779  0168  0876               	movf	getc@res,w
  3780  0169  00F0               	movwf	??_getc
  3781  016A  0770               	addwf	??_getc,w
  3782  016B  00F1               	movwf	??_getc+1
  3783  016C  0871               	movf	??_getc+1,w
  3784  016D  00F6               	movwf	getc@res
  3785                           
  3786                           ;soft_uart_8_9600.c: 52: res += PORTAbits.RA2;
  3787  016E  1283               	bcf	3,5	;RP0=0, select bank0
  3788  016F  0C05               	rrf	5,w	;volatile
  3789  0170  00F0               	movwf	??_getc
  3790  0171  0C70               	rrf	??_getc,w
  3791  0172  3901               	andlw	1
  3792  0173  00F1               	movwf	??_getc+1
  3793  0174  0871               	movf	??_getc+1,w
  3794  0175  07F6               	addwf	getc@res,f
  3795                           
  3796                           ;soft_uart_8_9600.c: 54: for(j=0; j<9; j++) {
  3797  0176  01F7               	clrf	getc@j
  3798  0177  3009               	movlw	9
  3799  0178  0277               	subwf	getc@j,w
  3800  0179  1803               	btfsc	3,0
  3801  017A  2984               	goto	i1l1689
  3802  017B                     i1l53:	
  3803  017B  0000               	nop	;# 
  3804  017C  3001               	movlw	1
  3805  017D  00F0               	movwf	??_getc
  3806  017E  0870               	movf	??_getc,w
  3807  017F  07F7               	addwf	getc@j,f
  3808  0180  3009               	movlw	9
  3809  0181  0277               	subwf	getc@j,w
  3810  0182  1C03               	skipc
  3811  0183  297B               	goto	i1l53
  3812  0184                     i1l1689:	
  3813  0184  3001               	movlw	1
  3814  0185  00F0               	movwf	??_getc
  3815  0186  0870               	movf	??_getc,w
  3816  0187  07F5               	addwf	getc@i,f
  3817  0188  3008               	movlw	8
  3818  0189  0275               	subwf	getc@i,w
  3819  018A  1C03               	skipc
  3820  018B  2958               	goto	i1l1667
  3821  018C                     i1l1693:	
  3822                           
  3823                           ;soft_uart_8_9600.c: 56: }
  3824                           ;soft_uart_8_9600.c: 57: }
  3825                           ;soft_uart_8_9600.c: 61: a = res;
  3826  018C  0876               	movf	getc@res,w
  3827  018D  00F0               	movwf	??_getc
  3828  018E  0870               	movf	??_getc,w
  3829  018F  00F4               	movwf	getc@a
  3830                           
  3831                           ;soft_uart_8_9600.c: 62: res = 0;
  3832  0190  01F6               	clrf	getc@res
  3833                           
  3834                           ;soft_uart_8_9600.c: 64: for(i=0; i<8; i++) {
  3835  0191  01F5               	clrf	getc@i
  3836  0192  3008               	movlw	8
  3837  0193  0275               	subwf	getc@i,w
  3838  0194  1803               	btfsc	3,0
  3839  0195  29B0               	goto	i1l57
  3840  0196                     i1l1701:	
  3841                           
  3842                           ;soft_uart_8_9600.c: 65: res = res << 1;
  3843  0196  0876               	movf	getc@res,w
  3844  0197  00F0               	movwf	??_getc
  3845  0198  0770               	addwf	??_getc,w
  3846  0199  00F1               	movwf	??_getc+1
  3847  019A  0871               	movf	??_getc+1,w
  3848  019B  00F6               	movwf	getc@res
  3849                           
  3850                           ;soft_uart_8_9600.c: 66: res += a%2;
  3851  019C  0874               	movf	getc@a,w
  3852  019D  3901               	andlw	1
  3853  019E  00F0               	movwf	??_getc
  3854  019F  0870               	movf	??_getc,w
  3855  01A0  07F6               	addwf	getc@res,f
  3856                           
  3857                           ;soft_uart_8_9600.c: 67: a = a >> 1;
  3858  01A1  0874               	movf	getc@a,w
  3859  01A2  00F0               	movwf	??_getc
  3860  01A3  1003               	clrc
  3861  01A4  0C70               	rrf	??_getc,w
  3862  01A5  00F1               	movwf	??_getc+1
  3863  01A6  0871               	movf	??_getc+1,w
  3864  01A7  00F4               	movwf	getc@a
  3865  01A8  3001               	movlw	1
  3866  01A9  00F0               	movwf	??_getc
  3867  01AA  0870               	movf	??_getc,w
  3868  01AB  07F5               	addwf	getc@i,f
  3869  01AC  3008               	movlw	8
  3870  01AD  0275               	subwf	getc@i,w
  3871  01AE  1C03               	skipc
  3872  01AF  2996               	goto	i1l1701
  3873  01B0                     i1l57:	
  3874                           ;soft_uart_8_9600.c: 68: }
  3875                           ;soft_uart_8_9600.c: 73: while(PORTAbits.RA2==0) {}
  3876                           
  3877  01B0  1283               	bcf	3,5	;RP0=0, select bank0
  3878  01B1  1D05               	btfss	5,2	;volatile
  3879  01B2  29B0               	goto	i1l57
  3880                           
  3881                           ;soft_uart_8_9600.c: 75: return res;
  3882  01B3  0876               	movf	getc@res,w
  3883  01B4  0008               	return
  3884  01B5                     __end_of_getc:	
  3885  007E                     btemp	set	126	;btemp
  3886  007E                     wtemp	set	126
  3887  007E                     wtemp0	set	126
  3888  0080                     wtemp1	set	128
  3889  0082                     wtemp2	set	130
  3890  0084                     wtemp3	set	132
  3891  0086                     wtemp4	set	134
  3892  0088                     wtemp5	set	136
  3893  007F                     wtemp6	set	127
  3894  007E                     ttemp	set	126
  3895  007E                     ttemp0	set	126
  3896  0081                     ttemp1	set	129
  3897  0084                     ttemp2	set	132
  3898  0087                     ttemp3	set	135
  3899  007F                     ttemp4	set	127
  3900  007E                     ltemp	set	126
  3901  007E                     ltemp0	set	126
  3902  0082                     ltemp1	set	130
  3903  0086                     ltemp2	set	134
  3904  0080                     ltemp3	set	128


Data Sizes:
    Strings     38
    Constant    31
    Data        0
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     45      61
    BANK1            32      0      32

Pointer List with Targets:

    atol@s	PTR const unsigned char  size(1) Largest target is 32
		 -> cmd(BANK1[32]), 

    cmdStartsWith@st	PTR unsigned char  size(1) Largest target is 6
		 -> STR_7(CODE[5]), STR_6(CODE[6]), STR_5(CODE[5]), STR_3(CODE[4]), 
		 -> STR_2(CODE[4]), 

    puts@s	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_4(CODE[10]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_getc

Critical Paths under _main in BANK0

    _main->_exeCmd
    _exeCmd->_showParams
    _updateParam->_writeParam
    _writeParam->_eeWrite32
    _eeWrite32->_eeWrite8
    _showParams->_putn
    _puts->_putc
    _putn->___llmod
    ___llmod->___lldiv
    _putLF->_putc
    _initParams->_readParam
    _readParam->_eeRead32
    _eeRead32->_eeRead8
    _atol->___lmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    8082
                                             40 BANK0      5     5      0
                            ___llmod
                         _closeValve
                             _exeCmd
                          _initPORTS
                         _initParams
                          _openValve
 ---------------------------------------------------------------------------------
 (1) _initPORTS                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _exeCmd                                               5     5      0    7305
                                             35 BANK0      5     5      0
                               _atol
                         _closeValve
                      _cmdStartsWith
                          _openValve
                              _putLF
                               _putc
                               _putn
                               _puts
                         _showParams
                        _updateParam
 ---------------------------------------------------------------------------------
 (2) _updateParam                                          7     3      4     831
                                             20 BANK0      7     3      4
                         _writeParam
 ---------------------------------------------------------------------------------
 (3) _writeParam                                           7     3      4     611
                                             13 BANK0      7     3      4
                          _eeWrite32
 ---------------------------------------------------------------------------------
 (4) _eeWrite32                                           11     7      4     435
                                              2 BANK0     11     7      4
                           _eeWrite8
 ---------------------------------------------------------------------------------
 (5) _eeWrite8                                             2     1      1     236
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _showParams                                           2     2      0    2957
                                             33 BANK0      2     2      0
                         _initParams
                              _putLF
                               _putc
                               _putn
                               _puts
 ---------------------------------------------------------------------------------
 (3) _puts                                                 3     3      0     379
                                              5 BANK0      3     3      0
                               _putc
 ---------------------------------------------------------------------------------
 (3) _putn                                                 9     5      4    1735
                                             24 BANK0      9     5      4
                            ___almod
                            ___lldiv
                            ___llmod
                               _putc
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     415
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     290
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) ___almod                                             11     3      8     424
                                              0 BANK0     11     3      8
 ---------------------------------------------------------------------------------
 (3) _putLF                                                0     0      0     229
                               _putc
 ---------------------------------------------------------------------------------
 (4) _putc                                                 5     5      0     229
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _initParams                                           2     2      0     317
                                             22 BANK0      2     2      0
                          _readParam
 ---------------------------------------------------------------------------------
 (2) _readParam                                            7     3      4     249
                                             15 BANK0      7     3      4
                           _eeRead32
 ---------------------------------------------------------------------------------
 (3) _eeRead32                                            14    10      4     159
                                              1 BANK0     14    10      4
                            _eeRead8
 ---------------------------------------------------------------------------------
 (4) _eeRead8                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _openValve                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _cmdStartsWith                                        3     3      0     284
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _closeValve                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _atol                                                15    11      4     638
                                             13 BANK0     15    11      4
                             ___lmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     220
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  5     5      0     371
                                              8 COMMON     5     5      0
                               _getc
 ---------------------------------------------------------------------------------
 (8) _getc                                                 8     8      0     371
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___llmod
     ___lldiv (ARG)
   _closeValve
   _exeCmd
     _atol
       ___lmul
       _isdigit
     _closeValve
     _cmdStartsWith
     _openValve
     _putLF
       _putc
     _putc
     _putn
       ___almod
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       _putc
     _puts
       _putc
     _showParams
       _initParams
         _readParam
           _eeRead32
             _eeRead8
       _putLF
         _putc
       _putc
       _putn
         ___almod
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putc
       _puts
         _putc
     _updateParam
       _writeParam
         _eeWrite32
           _eeWrite8
   _initPORTS
   _initParams
     _readParam
       _eeRead32
         _eeRead8
   _openValve

 _isr (ROOT)
   _getc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     2D      3D       4       76.2%
BANK1               20      0      20       5      100.0%
ABS                  0      0      6B       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0      6B       8        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Aug 10 07:07:41 2016

                      _c 005A                        pc 0002              __CFG_CP$OFF 0000  
                     l63 0363                       l64 036D                       l66 039E  
                     l67 038C                       l93 0689                       fsr 0004  
                    l182 0451                      l183 0465                      l418 00AE  
                    l368 0240                      _PR2 0092             __CFG_CPD$OFF 0000  
                    _cmd 00A0                      _sec 0055                      _isr 0572  
                    fsr0 0004                      indf 0000             __CFG_FOSC$HS 0000  
                   l1313 0352                     l1305 0315                     l1411 0283  
                   l1405 0255                     l1501 020C                     l1335 0377  
                   l1407 0265                     l1415 0290                     l1431 02C8  
                   l1505 0215                     l1531 049C                     l1603 064C  
                   l1347 0396                     l1419 029E                     l1443 02FD  
                   l1429 02B8                     l1453 03B4                     l1517 0623  
                   l1535 04B2                     l1551 069A                     l1383 0532  
                   l1527 05D4                     l1439 02F0                     l1455 03C4  
                   l1463 03EF                     l1519 0601                     l1625 00D3  
                   l1385 050F                     l1481 01C5                     l1473 0654  
                   l1387 0537                     l1459 03E2                     l1563 0506  
                   l1645 0130                     l1637 00E1                     l1565 04D6  
                   l1741 046B                     l1813 004B                     l1639 011C  
                   l1591 0635                     l1399 024D                     l1807 0044  
                   l1585 062C                     l1497 0209                     l1489 01CD  
                   l1577 0543                     l1745 0471                     l1835 008E  
                   l1597 063E                     l1749 048D                     l1829 006D  
                   l1839 00A0                     l1799 003D                     ?_isr 0070  
                   STR_1 043F                     STR_2 0447                     STR_3 0443  
                   STR_4 0425                     STR_5 043A                     STR_6 042F  
                   STR_7 0435                     u1215 05BE                     u1315 0273  
                   u1245 0520                     u1325 0284                     u1405 02F1  
                   u1095 031E                     u2065 009D                     u1435 03B8  
                   u1515 01D8                     u1365 02BC                     u1295 0259  
                   u1455 03D2                     u1625 04B4                     u1385 02CA  
                   u1465 03E3                     u1705 0555                     u1635 04BC  
                   u1395 02DF                     u1565 061A                     u1585 05E4  
                   u1685 04E7                     u1790 0105                     u1791 0106  
                   u1792 010B                     u1793 010C                     i1l51 015D  
                   i1l52 0166                     i1l44 013C                     i1l53 017B  
                   i1l47 0144                     i1l48 014D                     i1l57 01B0  
                   _TMR2 0011                     _WPUA 0095                     _getc 0139  
                   _atol 00AC                     _main 001C                     _putc 035B  
                   _putn 01B5                     btemp 007E                     _puts 0651  
                   ltemp 007E                     start 000F                     ttemp 007E  
                   wtemp 007E            __CFG_IESO$OFF 0000                    ??_isr 0078  
                  ?_getc 0070          __end_of___almod 02A7                    ?_atol 002D  
                  ?_main 0070                    _EEADR 009B            __CFG_WDTE$OFF 0000  
                  ?_putc 0070                    ?_putn 0038                    ?_puts 0070  
                  _ANSEL 0091          __end_of___lldiv 0306          __end_of_eeRead8 06AC  
        __end_of___llmod 03F8                    _TRISA 0085                    _TRISC 0087  
    ___lmul@multiplicand 0024            __CFG_PWRTE$ON 0000           __CFG_FCMEN$OFF 0000  
        __end_of_isdigit 069C            eeWrite32@addr 002B                    _putLF 06AC  
                  getc@a 0074                    getc@i 0075                    getc@j 0077  
          eeWrite32@data 0022                    atol@a 0036                    atol@c 003B  
                  atol@s 003A                    main@r 0049           __CFG_BOREN$OFF 0000  
                  pclath 000A                    ltemp0 007E                    ltemp1 0082  
                  ltemp2 0086                    ltemp3 0080    __end_of_cmdStartsWith 0651  
                  putc@i 0023                    putc@j 0024                    putn@i 0040  
                  putn@n 0038                    putn@z 003E                    puts@i 0026  
                  ttemp0 007E                    ttemp1 0081                    ttemp2 0084  
                  ttemp3 0087                    puts@s 0027                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F             updateParam@i 003A  
         __CFG_MCLRE$OFF 0000          __initialization 0010             __end_of_getc 01B5  
           __end_of_atol 0139             __end_of_main 00AC             __end_of_putc 03AB  
           __end_of_putn 022F             __end_of_puts 0666                   ??_getc 0070  
                 ??_atol 0031                   ??_main 0048                   ??_putc 0020  
                 ??_putn 003C                   ??_puts 0025         ___llmod@dividend 0032  
                 _EEDATA 009A                   _EECON2 009D                   ?_putLF 0070  
                 _CMCON0 0019         __end_of_eeRead32 035B                   i1l1701 0196  
                 i1l1667 0158                   i1l1693 018C                   i1l1855 057F  
                 i1l1689 0184                   i1l1865 0597                   i1l1859 0587  
            initParams@i 0037         __end_of_eeWrite8 068D              readParam@id 0034  
                 ___lmul 0493                ??___almod 0028                ??___lldiv 0028  
              ??_eeRead8 0020                ??___llmod 0036                   _exeCmd 044B  
       __end_of_paramIds 0425                   _params 004D                ??_isdigit 0020  
                 saved_w 007E             eeRead32@addr 0029            updateParam@id 0039  
__end_of__initialization 001A            putn@decaShift 0406             ?_updateParam 0034  
         __pcstackCOMMON 0070       __size_of_eeWrite32 002F            __end_of_putLF 06AF  
         _OPTION_REGbits 0081                  ??_putLF 0025               __pbssBANK0 004D  
             __pbssBANK1 00A0       __size_of_initPORTS 0014       __size_of_readParam 0034  
             __pmaintext 001C                  ?___lmul 0020               __pintentry 0004  
                ?_exeCmd 0070       __size_of_openValve 0003           ___lmul@product 0029  
              ?_eeRead32 0021                ?_eeWrite8 0020               _closeValve 06B2  
      __end_of_eeWrite32 05D2               __stringtab 0400               eeWrite32@i 002C  
             _initParams 05D2                  ___almod 022F          __size_of___lmul 0040  
                ___lldiv 02A7                  _eeRead8 06A4                  ___llmod 03AB  
        __size_of_exeCmd 0048               ??_eeRead32 0025        __end_of_initPORTS 067A  
                __ptext1 0666                  __ptext2 044B                  __ptext3 04D3  
                __ptext4 05FE                  __ptext5 05A3                  __ptext6 067A  
                __ptext7 0540                  __ptext8 0651                  __ptext9 01B5  
      __end_of_readParam 0540               ??_eeWrite8 0021                _T2CONbits 0012  
                _isdigit 068D             __size_of_isr 0031                  getc@res 0076  
                clrloop0 069D     end_of_initialization 001A        __end_of_openValve 06B2  
        ___lldiv@divisor 0020          ___lldiv@counter 002D     __size_of_updateParam 0039  
                putn@dig 003F               _showParams 0540              showParams@i 0042  
              _PORTAbits 0005                _PORTCbits 0007             writeParam@id 0032  
 __size_of_cmdStartsWith 0028              ?_closeValve 0070           updateParam@val 0034  
            ?_initParams 0070               _writeParam 05FE           __end_of___lmul 04D3  
         __end_of_exeCmd 0493      start_initialization 0010             eeWrite8@addr 0021  
           eeWrite8@data 0020              __end_of_isr 05A3              _btEnCounter 0059  
          _cmdStartsWith 0629          ___llmod@divisor 002E          ___llmod@counter 0037  
             readParam@i 0035      __size_of_closeValve 0003                 ??___lmul 0028  
               ??_exeCmd 0043              ?_showParams 0070              eeRead32@res 002A  
      __size_of_eeRead32 0055              __pbssCOMMON 007D                ___latbits 0000  
          __pcstackBANK0 0020              eeRead8@addr 0020        __size_of_eeWrite8 0013  
    __size_of_initParams 002C           ?_cmdStartsWith 0070                _eeWrite32 05A3  
              eeRead32@i 002E                 ?___almod 0020                 ?___lldiv 0020  
               ?_eeRead8 0070                 ?___llmod 002E              ?_writeParam 002D  
       ___almod@dividend 0024                __pstrings 0400                 ?_isdigit 0070  
              _initPORTS 0666                _readParam 050C           __size_of_putLF 0003  
    __size_of_showParams 0032               ?_eeWrite32 0022        interrupt_function 0004  
               _IOCAbits 0096                clear_ram0 069C                _openValve 06AF  
               _PIR1bits 000C              writeParam@i 0033              __stringbase 0405  
              exeCmd@val 0044             ??_closeValve 0020               ?_initPORTS 0070  
             ?_readParam 002F        ___lmul@multiplier 0020          ??_cmdStartsWith 0020  
    __size_of_writeParam 002B          cmdStartsWith@st 0021               _EECON1bits 009C  
  __end_ofputn@decaShift 0422               ?_openValve 0070            ??_updateParam 0038  
           ??_initParams 0036       __end_of_closeValve 06B5         __size_of___almod 0078  
       __size_of___lldiv 005F         __size_of_eeRead8 0008         __size_of___llmod 004D  
               _eeRead32 0306       __end_of__stringtab 0406              _isdigit$582 0020  
               _eeWrite8 067A                 _cmdIndex 007D                 _cmdReady 005B  
       __size_of_isdigit 000F                 _tCounter 005C                 __ptext10 03AB  
               __ptext11 02A7                 __ptext20 0629                 __ptext12 022F  
               __ptext21 06B2                 __ptext13 06AC                 __ptext22 00AC  
               __ptext14 035B                 __ptext23 068D                 __ptext15 05D2  
               __ptext24 0493                 __ptext16 050C                 __ptext25 0572  
               __ptext17 0306                 __ptext26 0139                 __ptext18 06A4  
               __ptext19 06AF          ___almod@divisor 0020       __end_of_initParams 05FE  
        ___almod@counter 0029              ??_eeWrite32 0026            __size_of_getc 007C  
          __size_of_atol 008D            __size_of_main 0090                 _paramIds 0422  
          __size_of_putc 0050            __size_of_putn 007A            __size_of_puts 0015  
               getc@wait 0072                 atol@sign 0035             ??_showParams 0041  
    __end_of_updateParam 050C           cmdStartsWith@i 0022               _INTCONbits 000B  
            ??_initPORTS 0020              ??_readParam 0033                 isdigit@c 0021  
               intlevel1 0000         ___lldiv@dividend 0024       __end_of_showParams 0572  
            ??_openValve 0020                stringcode 0400                 putc@data 0022  
           ??_writeParam 0031         ___lldiv@quotient 0029                 stringdir 0400  
               stringtab 0400            writeParam@val 002D             ___almod@sign 002A  
     __end_of_writeParam 0629              _updateParam 04D3  
